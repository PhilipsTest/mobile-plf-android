apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.+'
    }
}
//apply plugin: 'com.jfrog.artifactory-upload'
//apply plugin: 'maven'

//buildscript {
//    repositories {
//        jcenter()
//        maven {
//            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
//            credentials {
//                username = "readonly"
//                password = "readonly"
//            }
//        }
//        mavenCentral()
//    }
//    dependencies {
//        classpath 'com.android.tools.build:gradle:1.5.0'
//        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2'
//        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '0.1.0', changing:true
//    }
//}

//apply plugin: 'cdpSCM'
//import com.philips.cdp.cdpSCM
//
//def objcdp = new cdpSCM()
//objcdp.setProjectDir(projectDir)
//
//repositories {
////    maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
//    maven {
//        url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android'
//    }
//}
//
//group = 'com.philips.cdp'
//version = objcdp.getVersion()
//
//artifactory {
//    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
//    publish {
//        repository {
//            repoKey = objcdp.getArtifactoryRepoKey('android')
//            username = objcdp.getArtifactoryUploadUser()
//            password = objcdp.getArtifactoryUploadPwd()
//            publishPom = true
//            publishIvy = false
//            publishBuildInfo = true
//            maven = true
//        }
//    }
//    resolve {
//        repository {
//            repoKey = 'libs-release-local-android'
//        }
//    }
//}


android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        testApplicationId "com.philips.cdp.di.iap.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        generatedDensities = []
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

configurations {
    compile.exclude module: 'support-annotations'
}
dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Support libraries
    compile "com.android.support:appcompat-v7:${supportLibraryVer}"
    compile "com.mcxiaoke.volley:library:${volleyVer}"
    compile "com.android.support:design:${supportDesignVer}"
    compile "com.google.code.gson:gson:${gsonVer}"
    compile(name: 'prx-release', ext: 'aar')
    //uikit lib
    compile "com.philips.cdp:uikitLib:${uikitLibVer}"
    // Other
    compile "com.jakewharton:butterknife:${butterKnifeVer}"

    // Tests
    testCompile "junit:junit:${junitVer}"
    testCompile "org.mockito:mockito-all:${mockitoVer}"
    testCompile "org.robolectric:robolectric:${robolectricVer}"
}






task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug/com/philips/cdp/di/iap')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }

}
