apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../iap/src/main/java'
]

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter'
        }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'com.shamanland:fonticon:0.1.+'
        classpath 'com.google.code.gson:gson:2.2.+'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2"
        classpath 'com.philips.cdp:cdpSCM:0.1.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-stage-local-android'
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }

        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName objcdp.getVersionWithHash()
        multiDexEnabled true
        testApplicationId "com.philips.cdp.di.iap.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        generatedDensities = []
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }

    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'

    }
    lintOptions {
        abortOnError false
    }
}

configurations {
    compile.exclude module: 'support-annotations'
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    //Android support libraries
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:design:23.1.1'

    //3rd party
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.googlecode.libphonenumber:libphonenumber:7.1.1'

    //Coco
    compile 'com.philips.cdp:uikitLib:3.2.3'
    compile(group: 'com.philips.cdp', name: 'uAppFwLib', version: '0.1.0-rc.5', ext: 'aar')
    compile('com.philips.cdp:registrationApi:7.1.0-rc.2') {
        exclude group: 'com.android.support'
        transitive = true
    }

    // Tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.17'
    testCompile 'org.robolectric:robolectric:3.0'

    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
}

//maven configuration stuff required for artifactory plugin
group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
            publishArtifacts = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local-android'
        }
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents" + File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS===========


task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }

}
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

//    jvmArgs = ["-XX:-UseSplitVerifier"]
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../iap/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/response/*/*.class',
                       '**/view/*.class',
                       '**/adapters/*.class',
                       '**/analytics/*.class',
                       '**/utils/*.class',
                       '**/activity/*.class',
                       '**/Fragments/*.class']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../iap/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}
