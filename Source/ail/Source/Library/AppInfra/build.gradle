apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/taskscc.gradle'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

android {
    signingConfigs {
        release
    }

    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionName version + "(" + objcdp.getCommitHash() + ")"
        testApplicationId "com.philips.platform.appinfra.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules-ail.pro'
    }

    sourceSets.main
            {
                jni.srcDirs = []
                jniLibs.srcDir 'src/main/libs'
            }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
            }
        }

    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            testCoverageEnabled=true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    def dp = project.ext.has('useprojectdependencies')

    if (dp) {
        implementation project(':pif')

    } else {
        implementation philipsdeps.pif
    }
    implementation deps.adobemobilelib
    implementation deps.gson
    implementation deps.volley
    implementation deps.support.design
    implementation deps.support.supportv4
    implementation deps.support.annotations
    implementation deps.joda_time
    api deps.room_runtime,{
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    }
    api deps.livedata,{
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    }
    annotationProcessor deps.room_compiler
    annotationProcessor deps.livedata_compiler

    testImplementation deps.robolectric
    testImplementation deps.assertj
    testImplementation deps.mockito
    testImplementation deps.junit
    testImplementation deps.powermock_core
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit

    androidTestImplementation deps.dexmaker_google
    androidTestImplementation deps.dexmaker_google_mockito
    androidTestImplementation deps.mockito_old
    androidTestImplementation deps.junit
}
tasks.withType(Test) {
    ignoreFailures = true
}