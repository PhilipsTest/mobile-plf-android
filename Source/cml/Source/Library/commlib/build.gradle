/*
 * Copyright (c) 2015-2017 Koninklijke Philips N.V.
 * All rights reserved.
 */

buildscript { bs ->
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath(builddeps.buildinfoextractor)
        classpath(builddeps.cdpSCM)
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "commlib"
version = objcdp.getVersion(versions.cml_commlib)

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version
        buildConfigField "String", "TLA", "\"cml\""
    }

    buildTypes {
        debug {
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}(${objcdp.getCommitHash()})\""
        }
        release {
            consumerProguardFiles 'proguard-rules.pro'
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}\""
        }
    }

    lintOptions {
        abortOnError false
    }
    publishNonDefault true
}

dependencies {
    provided deps.support.annotations

    def suffix = objcdp.getVersionSuffix()

    for (dep in [':commlib-ble', ':commlib-cloud', ':commlib-lan']) {
        if (findProject(dep)) {
            debugCompile project(path: dep, configuration: 'debug')
            releaseCompile project(path: dep, configuration: 'release')
        } else {
            compile("$group$dep:$versions.cml_commlib$suffix") { changing = true }
        }
    }

    for (dep in [':cloudcontroller', ':commlib-testutils']) {
        if (findProject(dep)) {
            testCompile project(path: dep, configuration: 'debug')
        } else {
            testCompile("$group$dep:$versions.cml_commlib$suffix") { changing = true }
        }
    }

    testCompile deps.powermock_mockito
    testCompile deps.powermock_junit
}