/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = "commlib"

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        multiDexEnabled true
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version
        buildConfigField "String", "TLA", "\"cml\""
    }

    buildTypes {
        debug {
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}(${objcdp.getCommitHash()})\""
        }
        release {
            consumerProguardFiles 'proguard-rules.pro'
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}\""
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    compileOnly deps.support.annotations

    def suffix = objcdp.getVersionSuffix()

    for (dep in [':commlib-ble', ':commlib-cloud', ':commlib-lan']) {
        if (findProject(dep)) {
            implementation project(dep)
        } else {
            implementation("$group$dep:$platformversion$suffix") { changing = true }
        }
    }

    for (dep in [':cloudcontroller', ':commlib-testutils']) {
        if (findProject(dep)) {
            testImplementation project(dep)
        } else {
            testImplementation("$group$dep:$platformversion$suffix") { changing = true }
        }
    }

    testImplementation deps.powermock_junit
}
tasks.withType(Test) {
    ignoreFailures = true
}