/*
 * Copyright (c) 2015-2017 Koninklijke Philips N.V.
 * All rights reserved.
 */

buildscript { bs ->
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath(builddeps.buildinfoextractor)
        classpath(builddeps.cdpSCM)
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'

import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "cloudcontroller-api"
version = objcdp.getVersion(versions.cml_commlib)

repositories {
    maven {
        url repos.jcenter
        credentials {
            username = "readonly"
            password = "123qweasdzxc"
        }
    }
    maven {
        url objcdp.getArtifactoryUrl()
        credentials {
            username = "readonly"
            password = "123qweasdzxc"
        }
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                    resolvedArtifacts.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                        dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                        dependencyNode.appendNode('version', it.moduleVersion.id.version)
                    }
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.sdk
        versionCode 1
        versionName version
        buildConfigField "String", "TLA", "\"cca\""
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
    publishNonDefault true
}

configurations {
    javadocDeps
}

dependencies {
    compile deps.support.annotations
    javadocDeps deps.support.annotations
    testCompile deps.junit
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'

    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}

task generateJavadocPublicApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${project.rootDir}/../../Documents/External/${project.name}/")

    include {
        if (it.isDirectory) {
            return true
        }
        return true //it.file.text.contains("* @publicApi")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/")
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    failOnError false
}

task generateJavadoc(type: Javadoc, dependsOn: sourcesJar) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps

    options {
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    exclude '**/BuildConfig.java'
    exclude '**/R.java'

    failOnError false
}

task javadocJar(type: Jar, dependsOn: generateJavadoc) {
    classifier 'javadoc'

    exclude '**/BuildConfig.java'
    exclude '**/R.java'

    from "$project.buildDir/docs/javadoc"
}

def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
    archives sourcesJar
    archives javadocJar
}

/**
 * Zips external documentation to be included with a release
 */
task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents" + File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}

/**
 * Creates sources.jar for easier debugging
 */
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

zipDocuments {}.dependsOn generateJavadoc