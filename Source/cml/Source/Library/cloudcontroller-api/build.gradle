/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'

archivesBaseName = strings.cca.artifactName

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        multiDexEnabled true
        minSdkVersion versions.minsdk
        targetSdkVersion versions.sdk
        versionCode 1
        versionName version
        buildConfigField "String", "TLA", "\"cca\""
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

configurations {
    javadocDeps
}

dependencies {
    implementation deps.support.annotations
    javadocDeps deps.support.annotations
    testImplementation deps.junit
}

task generateJavadocPublicApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${project.rootDir}/../../Documents/External/${project.name}/")

    include {
        if (it.isDirectory) {
            return true
        }
        return true //it.file.text.contains("* @publicApi")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/")
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    failOnError false
}

task generateJavadoc(type: Javadoc, dependsOn: sourceJar) {
    source = android.sourceSets.main.java.srcDirs

    doFirst {
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.javadocDeps
    }

    options {
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    exclude '**/BuildConfig.java'
    exclude '**/R.java'

    failOnError false
}
tasks.withType(Test) {
    ignoreFailures = true
}
