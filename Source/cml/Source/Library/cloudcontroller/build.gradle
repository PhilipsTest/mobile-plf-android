/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'

archivesBaseName = "cloudcontroller"


android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        multiDexEnabled true
        minSdkVersion versions.minsdk
        targetSdkVersion versions.sdk
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "TLA", "\"ccc\""
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    api files('ICPClientInterface.jar')

    compileOnly deps.support.annotations

    def suffix = objcdp.getVersionSuffix()

    for (dep in [':cloudcontroller-api']) {
        if (directdependencies) {
            implementation project(dep)
        } else {
            implementation("$group$dep:$platformversion$suffix") { changing = true }
        }
    }

    if (findProject(":commlib-testutils")) {
        testImplementation project(':commlib-testutils')
    } else {
        testImplementation("$group:commlib-testutils:$versions.cml_commlib$suffix") { changing = true }
    }

    testImplementation deps.junit
    testImplementation deps.assertj

    testImplementation(deps.robolectric) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testImplementation(deps.robolectric_shadows) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_api_mockito
}
tasks.withType(Test) {
    ignoreFailures = true
}

task copyLibDebug(type: Copy) {
    from 'libs/ICPClientInterface.jar'
    into "build/intermediates/bundles/debug/libs/"
}
task copyLibRelease(type: Copy) {
    from 'libs/ICPClientInterface.jar'
    into "build/intermediates/bundles/release/libs/"
}

preBuild.dependsOn(copyLibDebug)
preBuild.dependsOn(copyLibRelease)