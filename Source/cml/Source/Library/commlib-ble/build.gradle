/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'pl.droidsonroids.pitest'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = strings.cmlble.artifactName

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        versionCode 1
        versionName version
        buildConfigField "String", "TLA", "\"cba\""
        multiDexEnabled true
    }

    buildTypes {
        debug {
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}(${objcdp.getCommitHash()})\""
        }
        release {
            consumerProguardFiles 'proguard-rules.pro'
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}\""
        }
    }
}

apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

dependencies {
    implementation deps.support.supportv4
    compileOnly deps.support.annotations

    if (directdependencies) {
        implementation project(strings.bll.projectName)
        implementation project(strings.cmlapi.projectName)
        implementation project(strings.ail.projectName)
    } else {
        implementation philipsdeps.bluelib
        implementation philipsdeps.commlib_api
        implementation philipsdeps.AppInfra
    }

    testImplementation deps.junit
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit
    testImplementation deps.assertj
}

pitest {
    targetClasses = [
            'com.philips.cdp2.commlib.ble.communication.*',
            'com.philips.cdp2.commlib.ble.discovery.*',
    ]  /* specify target classes to be mutated */
    pitestVersion = versions.pitest
    avoidCallsTo = ['com.philips.cdp.dicommclient.util.DICommLog']
    threads = 1 /* specify number of threads */
    outputFormats = ['XML', 'HTML'] /* specify output format */
    reportDir = "${rootDir.absolutePath}/build/report/${project.name}/pitest/"
    timestampedReports = false
}

tasks.withType(Test) {
    ignoreFailures = true
}