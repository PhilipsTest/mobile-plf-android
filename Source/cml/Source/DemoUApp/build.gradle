/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/androidtest.gradle'

archivesBaseName = strings.cmluapp.artifactName

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version
        buildConfigField "String", "LIBRARY_VERSION", "\"${version}(${objcdp.getCommitHash()})\""
    }


    buildTypes {
        debug {
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}(${objcdp.getCommitHash()})\""
        }
        release {
            consumerProguardFiles 'proguard-rules.pro'
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}\""
        }
    }
}

task generateJavadocPublicApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${projectDir}/../../Documents/External/${project.name}-api/")

    include {
        if (it.isDirectory) {
            return true
        }
        return true //it.file.text.contains("* @publicApi")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/")
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    failOnError false
}

dependencies {
    testImplementation deps.junit
    testImplementation deps.assertj
    testImplementation deps.mockito

    implementation deps.support.design
    implementation deps.support.cardview

    compileOnly deps.support.annotations

    if (directdependencies) {
        implementation project(strings.cml.projectName)
        implementation project(strings.cmlble.projectName)
        implementation project(strings.cmlapi.projectName)
        implementation project(strings.cmllan.projectName)
        implementation project(strings.ccl.projectName)
        implementation project(strings.clc.projectName)
        implementation project(strings.cca.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.ail.projectName)
    } else {
        implementation philipsdeps.cloudcontroller
        implementation philipsdeps.commlib
        implementation philipsdeps.uAppFwLib
        implementation philipsdeps.AppInfra
    }

    implementation deps.joda_time
    implementation deps.gson
}
tasks.withType(Test) {
    ignoreFailures = true
}