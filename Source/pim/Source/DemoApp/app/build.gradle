/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
    }
}

archivesBaseName = "pimApp"
group = 'com.philips.platform'

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
            username = "320049003"
            password = "#W3llc4m3"
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('apk')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = platformversion
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$buildDir/outputs/mapping/release/mapping.txt") {
                classifier = 'mapping'
            }

            artifact("$buildDir/outputs/apk/release/${archivesBaseName}-release.apk")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.getByName("implementation").allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}


android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        applicationId 'com.philips.apps.pimdemoapp'
        versionName version + "(" + commitHash + ")"
        versionCode 1
        manifestPlaceholders = [
                udiRedirectScheme: 'com.philips.apps.94e28300-565d-4110-8919-42dc4f817393'
        ]
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    println "  projectDir:   " + project.projectDir;
    def propFile = new File("${project.projectDir}/signing.properties")
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            println 'signing.properties found and fully filled in'
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'prg NOPE - signing.properties NOT found'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'prg signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */
    dataBinding {
        enabled = true
    }
}


apply from: "../scripts/flavors.gradle"

dependencies {
    debugImplementation deps.leakcanary
    releaseImplementation deps.leakcanary_no_op
    testImplementation deps.leakcanary_no_op
    annotationProcessor deps.butterknife_compiler
    implementation project(strings.usr.projectName)
    implementation project(':AppInfra')
    implementation project(':uAppFwLib')
    implementation philipsdeps.uid
    implementation project(':pim')
    implementation project(':pimUApp')
    implementation deps.androidx.appcompat
    implementation deps.androidx.constraintlayout
    implementation deps.design
    implementation deps.androidx.multidex
    implementation deps.greenrobot
    implementation deps.butterknife
    implementation deps.adobemobilelib
    leakCanaryImplementation deps.leakcanary
    psraReleaseImplementation deps.leakcanary_no_op

}
