apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
archivesBaseName = "IconFont"

buildscript {
    repositories {
        maven { url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}


allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============


android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools
    defaultConfig {
        multiDexEnabled true
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version +  "(" + objcdp.getCommitHash() + ")"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
        }
    }


}

configurations {

}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation(deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation deps.junit
    implementation deps.gson
}
tasks.withType(Test) {
    ignoreFailures = true
}