apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
//apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'

archivesBaseName = strings.ecstestuapp.artifactName

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath 'com.android.tools.build.jetifier:jetifier-processor:1.0.0-beta02'
    }
}
///=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============


android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        versionCode 1
        versionName version
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        manifestPlaceholders = ['appAuthRedirectScheme': '']

    }

    buildTypes {
        release {
            minifyEnabled false
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'InvalidPackage'
        disable 'GradleCompatible'
        disable 'MissingTranslation'
        disable 'TypographyFractions', 'TypographyQuotes'
        absolutePaths false
        lintConfig file('lint.xml')
    }

    dataBinding {
        enabled = true
    }

}


/*packagingOptions {
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/dependencies.txt'
    exclude 'META-INF/LGPL2.1'

}*/


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.volley
    implementation deps.calligraphy
    implementation deps.gson
    implementation deps.libphonenumber

    implementation deps.androidx.appcompat
    testImplementation deps.junit
    implementation philipsdeps.uid

    //implementation project(path: ':philipsecommercesdk' , configuration: 'default')
    if (useprojectdependencies) {
        // implementation project(strings.iap.projectName)
        implementation project(strings.prx.projectName)
        implementation project(strings.usr.projectName)
        implementation project(strings.ail.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.pif.projectName)
        implementation project(strings.ecs.projectName)
        // implementation project(path: strings.ecs.projectName, configuration: 'default')
    } else {
        // implementation philipsdeps.iap
        implementation philipsdeps.ecs
        implementation philipsdeps.prx
        implementation philipsdeps.pif
        implementation philipsdeps.registrationApi
        implementation philipsdeps.AppInfra
        implementation philipsdeps.uAppFwLib
        implementation philipsdeps.philipsecommercesdk
    }
}


tasks.withType(Test) {
    ignoreFailures = true
}
