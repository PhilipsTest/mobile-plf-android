apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'


archivesBaseName = strings.ecs.artifactName

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath 'com.android.tools.build.jetifier:jetifier-processor:1.0.0-beta02'
        //classpath builddeps.cdpSCM
    }
}
//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============
android {
    signingConfigs {
        release
    }
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        multiDexEnabled true


        versionName version + "(" + commitHash + ")"

    }
    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules-ecs.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }

    }

    sourceSets {
        test {
            resources.srcDirs += ['src/test/resources']
        }

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }

    compileOptions {
        sourceCompatibility versions.sourceCompatibility
        targetCompatibility versions.targetCompatibility
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.androidx.appcompat
    testImplementation deps.junit
    implementation deps.volley
    implementation deps.gson
//    implementation philipsdeps.AppInfra


    if (useprojectdependencies) {
        implementation project(strings.ail.projectName)
    } else {
        implementation philipsdeps.AppInfra
    }
    // Tests
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_classloading_xstream
    testImplementation deps.robolectric
    testImplementation deps.robolectric_junit
    testImplementation deps.robolectric_shadows
    testImplementation deps.robolectric_utils
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation deps.json

}
