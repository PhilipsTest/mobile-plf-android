apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'

archivesBaseName = 'ecsuapp'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }



}


/*packagingOptions {
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/dependencies.txt'
    exclude 'META-INF/LGPL2.1'

}*/


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation deps.volley
    implementation deps.calligraphy
    implementation deps.gson
    implementation deps.libphonenumber

    testImplementation deps.junit
    implementation philipsdeps.uid
    implementation project(strings.ecs.projectName)
   // implementation project(path: ':philipsecommercesdk')
    if (useprojectdependencies) {
       // implementation project(strings.iap.projectName)
        implementation project(strings.prx.projectName)
        implementation project(strings.usr.projectName)
        implementation project(strings.ail.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.pif.projectName)
    } else {
       // implementation philipsdeps.iap
        implementation philipsdeps.prx
        implementation philipsdeps.pif
        implementation philipsdeps.registrationApi
        implementation philipsdeps.AppInfra
        implementation philipsdeps.uAppFwLib
    }
}


tasks.withType(Test) {
    ignoreFailures = true
}
