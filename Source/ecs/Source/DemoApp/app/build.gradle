/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        //classpath builddeps.cdpSCM
    }
}

archivesBaseName = 'ecsApp'

signingConfigs {
    release
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools


    defaultConfig {
        applicationId "com.philips.cdp.di.pesdemo"
        versionName version + "(" + commitHash+ ")"
        versionCode 1
    }



    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            proguardFile 'proguard-rules.pro'
        }
    }
    /*
     This defined for signing the apk -- start
      */
    def Properties props = new Properties()
    println "  projectDir:   " + project.projectDir;
    def propFile = new File("${project.projectDir}/signing.properties")
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            println 'signing.properties found and fully filled in'
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'ecs NOPE - signing.properties NOT found'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'ecs signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */

    flavorDimensions "default"

    productFlavors {
        simulator {
            applicationId 'com.philips.cdp.di.pesdemo'
            versionCode 2
            versionName "0.17.8"
        }
        device {
            applicationId 'com.philips.cdp.di.pesdemo'
            versionCode 2
            versionName "0.17.8"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'InvalidPackage'
        disable 'GradleCompatible'
        disable 'MissingTranslation'
        disable 'TypographyFractions', 'TypographyQuotes'
        absolutePaths false
        lintConfig file('lint.xml')
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    dataBinding {
        enabled = true
    }


}

dependencies {


    implementation project(strings.ecstestuapp.projectName)

    implementation deps.androidx.constraintlayout
    implementation deps.design
    implementation deps.androidx.annotations
    implementation deps.androidx.appcompat
    implementation philipsdeps.uid
    if (useprojectdependencies) {
        implementation project(strings.usr.projectName)

        implementation project(strings.prx.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.ail.projectName)
    } else {
        implementation(philipsdeps.registrationApi)
        implementation philipsdeps.prx

    }


}

tasks.withType(Test) {
    ignoreFailures = true
}


