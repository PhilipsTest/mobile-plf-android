apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.6.201602180812"
}

buildscript {
    apply from: projectDir.absolutePath + '/../../../ci-build-support/gradle/versions.gradle'
   
    repositories {
        maven { url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = "digitalCare"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://mvnrepository.com/artifact/org.robolectric/shadows-core" }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(versions.dcc_digitalCare)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionName version +  "(" + objcdp.getCommitHash() + ")"
        multiDexEnabled true
        generatedDensities = []
        testApplicationId "com.philips.cdp.digitalcare.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"

        resValue("string", "DCC_AUTHORITY", "com.philips.cdp.digitalcare")
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        // set JVM arguments for the test JVM(s)
        unitTests.all {
            jvmArgs '-noverify'
        }
    }

    resourcePrefix 'consumercare'

    buildTypes {
        release {
            shrinkResources false
            consumerProguardFiles 'proguard-dcc.pro'
            //consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-dcc.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled true
        }

        android.libraryVariants.all { variant ->

            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
                destinationDir = new File("${project.getProjectDir()}/doc/", "ConsumerCare")
                source = variant.javaCompile.source

                ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
                classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

                description "Generates Javadoc for $variant.name."

                options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
                options.links("http://docs.oracle.com/javase/7/docs/api/");
                options.links("http://developer.android.com/reference/reference/");
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile 'com.google.code.gson:gson:2.8.1'
    testCompile 'junit:junit:4.12'
    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        project(':pse')
    } else {
        compile(group: 'com.philips.cdp', name: 'productselection', version: versions.pse_productselection + objcdp.getVersionSuffix(), ext: 'aar', changing: true) 
        {
            transitive = true
        }
    }

    if(dp) {
        project(':uid')
    } else {
        compile(group: 'com.philips.cdp', name: 'uid', version: versions.uid_uid + objcdp.getVersionSuffix(), ext: 'aar', changing: true) 
        {
            transitive = true
        }
    }
    
    compile 'com.google.android.gms:play-services-maps:11.0.4'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testCompile 'org.robolectric:robolectric:3.4.2'
    testCompile 'org.robolectric:shadows-multidex:3.3.2'
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.powermock:powermock-core:1.6.6'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.6'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.6'
    testCompile 'org.powermock:powermock-api-mockito:1.6.6'
    testCompile 'org.powermock:powermock-classloading-xstream:1.6.6'
    //compile 'junit:junit:4.12'
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

tasks.withType(Test) {
  ignoreFailures = true
}