apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'
apply from: "../../../ci-build-support/gradle/versions.gradle"
apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
version = objcdp.getVersion(versions.mya_myAccount)

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools
    publishNonDefault true
    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi versions.target
        renderscriptSupportModeEnabled true
        multiDexEnabled true
        versionName version + "(" + objcdp.getCommitHash() + ")"
        consumerProguardFiles('proguard-rules.txt', 'proguard-rules-lib.txt')
    }

    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    /** Proguard on library reference: https://developer.android.com/studio/projects/android-library.html#Considerations
     *  Also reference with DLS library
     *  Generated aar file keep proguard.txt which take part in proguard process when added in app
     **/
    buildTypes {
        debug {

        }
        release {

        }
    }

    lintOptions {
        abortOnError false
    }

    jacocoAndroidUnitTestReport {
        csv.enabled false
        html.enabled true
        xml.enabled false
    }
}


dependencies {
    apply from: "../../../ci-build-support/gradle/versions.gradle"
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Android/Google
    compile "com.android.support:support-annotations:${versions.support}"
    compile "com.android.support:design:${versions.support}"
    compile "com.android.support:appcompat-v7:${versions.support}"
    compile "com.android.support:animated-vector-drawable:${versions.support}"
    compile "com.android.support:cardview-v7:${versions.support}"

    // Philips Dependencies
    def dp = project.ext.has('useprojectdependencies')

    def uikitLibModule = module(group: 'com.philips.cdp', name: 'uikitLib', version: versions.uit_uikitLib + objcdp.getVersionSuffix(), ext: 'aar')
    compile(dp ? project(':uikitLib') : uikitLibModule)
            {

                transitive = true

            }
    def commliblan = module(group: 'com.philips.cdp', name: 'commlib-lan', version: versions.cml_commlib + objcdp.getVersionSuffix(), changing: true)
    compile(dp ? project(':commlib-lan') : commliblan)
            {

                transitive = true

            }

    def uidModule = module(group: 'com.philips.cdp', name: 'uid', version: versions.uid_uid + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
    compile(dp ? project(':uid') : uidModule)
            {

                transitive = true

            }

    def IconFontModule = module(group: 'com.philips.cdp', name: 'IconFont', version: versions.icf_iconFont + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
    compile(dp ? project(':IconFont') : IconFontModule)
            {
                transitive = true
            }

    def ufwModule = module(group: 'com.philips.cdp', name: 'uAppFwLib', version: versions.uaf_uAppFwLib + objcdp.getVersionSuffix(), changing: true)
    compile(dp ? project(':uAppFwLib') : ufwModule)

    // External
    compile "com.google.dagger:dagger:${versionsExternal.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${versionsExternal.dagger}"
    compile "org.greenrobot:eventbus:${versionsExternal.eventBus}"
    compile "net.danlew:android.joda:${versionsExternal.joda}"

    // Test
    testCompile "junit:junit:${versionsExternal.junit}"
    testCompile "org.mockito:mockito-core:${versionsExternal.mockito}"
    testCompile "org.robolectric:robolectric:${versionsExternal.robolectric}"
    testCompile "org.powermock:powermock-module-junit4:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-api-mockito:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4-rule:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-classloading-xstream:${versionsExternal.powerMock}"
    testCompile("com.nhaarman:mockito-kotlin:${versionsExternal.mockitoKotlin}") {
        exclude group: 'org.mockito'
    }
}
