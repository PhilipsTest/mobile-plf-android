/*
 * Copyright (c) 2015-2017 Koninklijke Philips N.V.
 * All rights reserved.
 */

buildscript { bs ->
    apply from: rootDir.absolutePath + '/common/gradle/project-build.gradle', to: bs
    apply from: rootDir.absolutePath + '/common/gradle/module.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath(builddeps.buildinfoextractor)
        classpath(builddeps.cdpscm)
    }
}

apply plugin: 'com.android.library'
apply plugin: 'pl.droidsonroids.pitest'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

apply from: rootDir.absolutePath + '/common/gradle/module-tasks.gradle'

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = rootProject.name
version = objcdp.getVersion()

def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

repositories {
    maven {
        url repos.jcenter
        credentials {
            username = "readonly"
            password = "123qweasdzxc"
        }
    }
    maven {
        url objcdp.getArtifactoryUrl()
        credentials {
            username = "readonly"
            password = "123qweasdzxc"
        }
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version
        buildConfigField "String", "LIBRARY_VERSION", "\"${objcdp.getVersionWithHash()}\""
        buildConfigField "String", "TLA", "\"cml\""
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
    publishNonDefault true
}

task generateJavadocPublicApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${project.rootDir}/../Documents/External/${project.name}-api/")

    include {
        if (it.isDirectory) {
            return true
        }
        return true //it.file.text.contains("* @publicApi")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/")
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    failOnError false
}

dependencies {
    provided deps.support.annotations

    debugCompile project(path: ':commlib', configuration: 'debug')
    releaseCompile project(path: ':commlib', configuration: 'release')
    testCompile project(path: ':commlib', configuration: 'debug')

    compile deps.gson

    testCompile(group: 'com.philips.cdp', name: 'cloudcontroller', version: versions.cloudcontroller + objcdp.getVersionSuffix(), changing: true)
    
    testCompile deps.junit
    testCompile deps.mockito
    testCompile deps.powermock_mockito
    testCompile deps.powermock_junit
}

pitest {
    targetClasses = [
            'com.philips.cdp.dicommclient.port.common.*',
            'com.philips.cdp2.commlib.cloud.*',
            'com.philips.cdp2.commlib.core.*',
            'com.philips.cdp2.commlib.lan.communication.*',
            'com.philips.cdp2.commlib.lan.context.*',
            'com.philips.cdp2.commlib.lan.discovery.*',
            'com.philips.cdp2.commlib.lan.security.*',
            'com.philips.cdp.dicommclient.request.*',
    ]  /* specify target classes to be mutated */
    excludedClasses = [
            'com.philips.cdp2.commlib.core.port.firmware.util.FirmwarePortStateWaiterTest',
            'com.philips.cdp.dicommclient.port.common.PairingHandlerTest',
    ]
    pitestVersion = versions.pitest
    avoidCallsTo = ['com.philips.cdp.dicommclient.util.DICommLog']
    threads = 1 /* specify number of threads */
    outputFormats = ['XML', 'HTML'] /* specify output format */
    reportDir = "${rootDir.absolutePath}/build/report/${project.name}/pitest/"
    timestampedReports = false
}
