apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter'
        }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/plugins-release-local"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '2.1.0', changing: true
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = rootProject.name

allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
        maven { url objcdp.getArtifactoryUrl() }
    }
    apply plugin: 'com.jfrog.artifactory'
    group = 'com.philips.cdp'
}

group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('aar')
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            if (new File("$buildDir/outputs/aar/${archivesBaseName}-release.aar").exists()) {
                artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")
            } else if (new File("$buildDir/outputs/aar/${archivesBaseName}-release-unsigned.aar").exists()) {
                artifact("$buildDir/outputs/aar/${archivesBaseName}-release-unsigned.aar")
            } else if (new File("$buildDir/outputs/aar/${archivesBaseName}-debug.aar").exists()) {
                artifact("$buildDir/outputs/aar/${archivesBaseName}-debug.aar")
            } else {
            }

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 24
        versionCode 1
        versionName objcdp.getVersionWithHash()
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules.pro'
    }
    buildTypes {
        release {
         //   minifyEnabled false
          //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            testCoverageEnabled true
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile(group: 'com.philips.cdp', name: 'localeMatch', version: '2.4.5' + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
    {
        transitive = true
    }

    compile(group: 'com.philips.cdp', name: 'AppInfra', version: '1.5.5' + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
    {
        transitive = true
    }
    compile(group: 'com.google.code.gson', name: 'gson', version: '2.2.2')
    compile 'com.android.volley:volley:1.0.0'

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile "org.mockito:mockito-core:1.9.5"
}

