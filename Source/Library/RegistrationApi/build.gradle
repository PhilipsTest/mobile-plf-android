apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'

buildscript {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '0.1.0', changing: true
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)

allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android' }

    }

    apply plugin: 'com.jfrog.artifactory-upload'

    group = 'com.philips.cdp'

    artifactory {
        contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
        publish {
            repository {
                repoKey = objcdp.getArtifactoryRepoKey('android')
                username = objcdp.getArtifactoryUploadUser()
                password = objcdp.getArtifactoryUploadPwd()
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                maven = true
            }
        }
        resolve {
            repository {
                repoKey = 'libs-release-local'
            }
        }
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local'
        }
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents"+ File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 23
        versionName objcdp.getVersionWithHash()
        testApplicationId "com.philips.cdp.registration.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }


    lintOptions {
          abortOnError false
      }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles  'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            debuggable true
            testCoverageEnabled true
            proguardFile 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':jump')
    compile project(':hsdp')
    compile(group: 'com.philips.cdp', name: 'Tagging', version: '3.0.0', ext: 'aar')
    compile(group: 'org.apache.http.legacy', name: 'org.apache.http.legacy', version: '1.0.0')
    androidTestCompile project(':dexmaker-mockito-1.4')
    androidTestCompile project(':dexmaker-1.4')
    androidTestCompile project(':dexmaker-dx-1.4')
    androidTestCompile project(':mockito-all-1.10.19')
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug/com/philips/')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java/com')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}
