apply plugin: 'com.android.application'
apply from: '../extra/calabash.gradle'

repositories {
    maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
    maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-stage-local-android' }
    maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android' }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.philips.cdp.sampledigitalcare"
        minSdkVersion 15
        targetSdkVersion 23
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        generatedDensities = []
        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            proguardFile 'proguard.pro'
            signingConfig signingConfigs.release
        }
        debug {
            proguardFile 'proguard.pro'
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    def propFile = new File('signing.properties')
    if (propFile.canRead()){
        props.load(new FileInputStream(propFile))

        if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    }else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */


    productFlavors {
        simulator {
            applicationId 'com.philips.cdp.sampledigitalcare'
            versionCode 140
            versionName "4.2.0"
        }
        device {
            applicationId 'com.philips.cdp.sampledigitalcare'
            versionCode 140
            versionName "4.2.0"
        }
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }
}

calabash {
    calabashPath "../TestAutomation"
}

dependencies {
    compile project(':digitalCare')
    compile 'com.android.support:recyclerview-v7:23.1.1'
    //compile(group: 'com.philips.cdp', name: 'uikitLib', version: '3.1.0', ext: 'aar')
    //compile 'com.android.support:design:23.1.1'
    //compile 'com.shamanland:fonticon:0.1.8'
    //compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile(group: 'com.philips.cdp', name: 'Tagging', version: '3.0.0', ext: 'aar')
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

android {
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'

        pickFirst 'lib/arm64-v8a/librsjni.so'

        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        /*pickFirst 'lib/armeabi/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/x86/libRSSupport.so'*/
    }
}

