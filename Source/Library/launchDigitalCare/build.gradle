apply plugin: 'com.android.application'
apply from: '../extra/calabash.gradle'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

buildscript {
    repositories {
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter'
        }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/plugins-release-local"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '2.1.0', changing: true
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = rootProject.name + "App"

group = 'com.philips.cdp'
version = objcdp.getVersion()

allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
        maven { url objcdp.getArtifactoryUrl() }
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('apk')
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            if (new File("$buildDir/outputs/apk/${archivesBaseName}-release.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-release.apk")
            } else if (new File("$buildDir/outputs/apk/${archivesBaseName}-release-unsigned.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-release-unsigned.apk")
            } else if (new File("$buildDir/outputs/apk/${archivesBaseName}-debug.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-debug.apk")
            } else {
            }

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        //applicationId "com.philips.cdp.sampledigitalcare"
        applicationId "com.philips.cl.di.dev.pa"
        minSdkVersion 19
        targetSdkVersion 24
        generatedDensities = []
        multiDexEnabled true
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        generatedDensities = []

    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled true
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            proguardFile 'proguard.pro'
            proguardFile 'appinfraproguard.pro'
            //  proguardFile 'proguard.pro'
            signingConfig signingConfigs.release
        }
        debug {
            //   proguardFile 'C:/CodeRepository/ConsumerCare/consumer_care_android/Source/Library
            // /launchDigitalCare/proguard.pro'
            minifyEnabled false
            proguardFile 'proguard.pro'
            proguardFile 'appinfraproguard.pro'
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            // proguardFile 'C:/CodeRepository/ConsumerCare/consumer_care_android/Source/Library/
            // launchDigitalCare/proguard.pro'
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    def propFile = new File('signing.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */


    productFlavors {
        simulator {
            applicationId 'com.philips.cl.di.dev.pa'
            versionCode 601
            versionName '7.0.0.1'
        }
        device {
            applicationId 'com.philips.cl.di.dev.pa'
            versionCode 601
            versionName '7.0.0.1'
        }
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }
}

calabash {
    calabashPath "../TestAutomation"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile project(':digitalCare')
    compile 'com.android.support:recyclerview-v7:+'
    //compile(group: 'com.philips.cdp', name: 'uikitLib', version: '3.1.0', ext: 'aar')
    //compile 'com.android.support:design:23.1.1'
    //compile 'com.shamanland:fonticon:0.1.8'
    //compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.android.support:support-v4:+'
    //compile 'com.philips.cdp:Tagging:3.0.0@aar'
    compile 'com.android.support:multidex:+'

/*    compile(group: 'com.philips.cdp', name: 'digitalCare', version: '6.0.0-rc.2', ext: 'aar')
            {
                transitive true
            }*/
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

/*android {
    packagingOptions {
        exclude 'lib/arm64-v8a/librsjni.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
    }
}*/

