apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.neenbedankt.android-apt'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../dataServices/src/main/java'
]

buildscript {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/plugins-release-local"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '2.1.0', changing: true
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = rootProject.name

allprojects {
    repositories {
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local'
        }
        maven { url objcdp.getArtifactoryUrl() }
    }
    apply plugin: 'com.jfrog.artifactory'
}

group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            /* if (new File("$buildDir/outputs/aar/${archivesBaseName}-release.aar").exists()) {
                artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")
            } else if (new File("$buildDir/outputs/aar/${archivesBaseName}-release-unsigned.aar").exists()) {
                artifact("$buildDir/outputs/aar/${archivesBaseName}-release-unsigned.aar")
            } else if (new File("$buildDir/outputs/aar/${archivesBaseName}-debug.aar").exists()) {
                artifact("$buildDir/outputs/aar/${archivesBaseName}-debug.aar")
            } else {
            } */

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName objcdp.getVersionWithHash()
        multiDexEnabled true
        testApplicationId "com.philips.platform.dataservices.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        generatedDensities = []
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }

    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'

    }
    lintOptions {
        abortOnError false
    }
}

/*configurations {
    compile.exclude module: 'support-annotations'
}*/

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

    //Coco
    compile(group: 'com.philips.cdp', name: 'AppInfra', version: '1.6.0' + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
        transitive true
    }
    
    //Android Support
    compile 'com.android.support:support-annotations:24.2.1'
    compile 'com.android.support:multidex:1.0.0'

    //3rd Party
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'net.danlew:android.joda:2.9.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'javax.inject:javax.inject:1'

    compile "com.google.dagger:dagger:2.10"
    apt "com.google.dagger:dagger-compiler:2.10"
    provided 'org.glassfish:javax.annotation:10.0-b28'
    provided 'javax.annotation:jsr250-api:1.0'
    testApt "com.google.dagger:dagger-compiler:2.10"

    //Test Compile
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.10.17"
    testCompile "com.squareup.assertj:assertj-android:${androidAssertJVer}"

    testCompile("org.robolectric:robolectric:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../dataServices/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/response/*/*.class',
                       '**/view/*.class',
                       '**/adapters/*.class',
                       '**/analytics/*.class',
                       '**/utils/*.class',
                       '**/activity/*.class',
                       '**/Fragments/*.class']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../dataServices/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}
