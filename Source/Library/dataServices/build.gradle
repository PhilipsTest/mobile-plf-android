apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco'
apply plugin: 'com.neenbedankt.android-apt'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../dataServices/src/main/java'
]

buildscript {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '0.1.0', changing: true
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
    }
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)

allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android' }
		maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-snapshot-local-android' }

    }

    apply plugin: 'com.jfrog.artifactory-upload'

    group = 'com.philips.cdp'

    artifactory {
        contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
        publish {
            repository {
                repoKey = objcdp.getArtifactoryRepoKey('android')
                username = objcdp.getArtifactoryUploadUser()
                password = objcdp.getArtifactoryUploadPwd()
                //publishPom = true
                //publishIvy = false
                //publishBuildInfo = true
                //maven = true
            }
        }
        resolve {
            repository {
                repoKey = 'libs-release-local'
            }
        }
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
	contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
        repository {
            repoKey = "libs-snapshot-local-ios"
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
          //  publishPom = true
          //  publishIvy = false
          //  publishBuildInfo = true
        }
				        defaults {
            publishIvy = false
            publishPom = true
            publishArtifacts = true
        }
    }

    resolve {
        repository {
            repoKey = 'libs-release-local'
        }
    }
	clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents"+ File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============
android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName objcdp.getVersionWithHash()
        multiDexEnabled true
        testApplicationId "com.philips.platform.dataservices.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        generatedDensities = []
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }

    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'

    }
    lintOptions {
        abortOnError false
    }
}

/*configurations {
    compile.exclude module: 'support-annotations'
}*/

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'net.danlew:android.joda:2.9.2'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    testCompile 'junit:junit:4.12'
    compile 'javax.inject:javax.inject:1'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.android.support:support-annotations:24.2.1'

    // DAGGER
    compile "com.google.dagger:dagger:2.0.2"
    apt "com.google.dagger:dagger-compiler:2.0.2"
    provided 'org.glassfish:javax.annotation:10.0-b28'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'javax.inject:javax.inject:1'
    testApt "com.google.dagger:dagger-compiler:2.0.2"

    // Tests
   // testCompile project(':dataServices')
    testDebugCompile "org.mockito:mockito-all:1.10.17"
    testCompile "com.squareup.assertj:assertj-android:${androidAssertJVer}"
}

/*task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}*/

/*task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }

}*/
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

//    jvmArgs = ["-XX:-UseSplitVerifier"]
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../dataServices/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/response/*/*.class',
                       '**/view/*.class',
                       '**/adapters/*.class',
                       '**/analytics/*.class',
                       '**/utils/*.class',
                       '**/activity/*.class',
                       '**/Fragments/*.class']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../dataServices/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}
