/*
 * Copyright (c) 2015-2017 Koninklijke Philips N.V.
 * All rights reserved.
 */
apply plugin: 'com.android.library'

buildscript { bs ->
    apply from: projectDir.absolutePath + '/../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath(builddeps.buildinfoextractor)
        classpath(builddeps.cdpSCM)
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "shinelibDemoUApp"

version = objcdp.getVersion(versions.bll_shinelib)

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target

        versionCode 1
        versionName version +  "(" + objcdp.getCommitHash() + ")"
    }

    buildTypes {
        release {
            consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
    publishNonDefault true
}

dependencies {
    debugCompile project(path: ':pluginreferenceboard', configuration: 'debug')
    releaseCompile project(path: ':pluginreferenceboard', configuration: 'release')

    def dp = project.ext.has('useprojectdependencies')
    if(dp) {
        compile(project(':uAppFwLib'))
    } else {
        compile(group: 'com.philips.cdp', name: 'uAppFwLib', version: versions.uaf_uAppFwLib + objcdp.getVersionSuffix(), changing: true) {
        transitive = true
        }
    }

    compile deps.support.design
    compile "com.android.support:cardview-v7:${versions.support}"

    testCompile deps.junit
}

jacoco {
    toolVersion = versions.jacoco
}
