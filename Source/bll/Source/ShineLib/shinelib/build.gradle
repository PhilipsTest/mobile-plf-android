/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'pl.droidsonroids.pitest'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = "bluelib"

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 3
        versionName version
        buildConfigField "String", "TLA", "\"bll\""
    }

    buildTypes {
        debug {
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}(${objcdp.getCommitHash()})\""
        }
        release {
            consumerProguardFiles 'proguard-rules.pro'
            buildConfigField "String", "LIBRARY_VERSION", "\"${version}\""
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    for (dep in [':AppInfra']) {
        if (directdependencies) {
            implementation project(dep)
        } else {
            implementation("$group$dep:$platformversion$suffix") { changing = true }
        }
    }

    implementation deps.support.annotations
    implementation deps.gson

    testImplementation deps.junit
    testImplementation deps.junit_runners

    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit

    testImplementation deps.assertj

    testImplementation(deps.robolectric) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testImplementation(deps.robolectric_shadows) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

task generateJavadocPublicApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${projectDir}/../../../Documents/External/${project.name}-api/")

    include {
        if (it.isDirectory) {
            return true
        }
        return it.file.text.contains("* @publicApi")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/");
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    failOnError false
}

task generateJavadocPluginApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${projectDir}/../../../Documents/External/${project.name}-plugin-api/")

    include {
        if (it.isDirectory) {
            return true
        }

        if (it.file.text.contains("* @publicPluginApi")) {
            return true
        }

        if (it.file.text.contains("* @publicApi")) {
            return true
        }

        return false
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/");
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
    }

    failOnError false
}

task generateJavadoc()

generateJavadoc.dependsOn {
    tasks.findAll { task -> task.name.startsWith('generateJavadoc') && task.name != "generateJavadoc" }
}

pitest {
    targetClasses = [
            'com.philips.pins.shinelib.associationprocedures.*',
            'com.philips.pins.shinelib.bluetoothwrapper.*',
            'com.philips.pins.shinelib.capabilities.*',
            'com.philips.pins.shinelib.datatypes.*',
            'com.philips.pins.shinelib.exceptions.*',
            'com.philips.pins.shinelib.framework.*',
            'com.philips.pins.shinelib.services.*',
            'com.philips.pins.shinelib.utility.*',
            'com.philips.pins.shinelib.SHNCentral',
            'com.philips.pins.shinelib.SHNDeviceScanner',
            'com.philips.pins.shinelib.SHNDeviceScannerInternal',
            'com.philips.pins.shinelib.SHNService',
    ]  // specify target classes to be mutated
    excludedClasses = [
            'com.philips.pins.shinelib.utility.QuickTestConnectionTest',
            'com.philips.pins.shinelib.capabilities.DiCommFirmwarePortStateWaiterTest',
            'com.philips.pins.shinelib.bluetoothwrapper.BTGattTest',
            'com.philips.pins.shinelib.bluetoothwrapper.BTDeviceTest',
            'com.philips.pins.shinelib.framework.LeScanCallbackProxyTest',
    ]
    pitestVersion = versions.pitest
    avoidCallsTo = [
            'com.philips.cdp.dicommclient.util.DICommLog',
            'com.philips.pins.shinelib.utility.SHNLogger',
    ]
    threads = 1 // specify number of threads
    outputFormats = ['XML', 'HTML'] // specify output format
    reportDir = "${rootDir.absolutePath}/build/report/${project.name}/pitest/"
    timestampedReports = false
}
tasks.withType(Test) {
    ignoreFailures = true
}
