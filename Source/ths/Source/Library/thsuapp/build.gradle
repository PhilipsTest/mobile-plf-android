/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = "telehealth"

buildscript {
    dependencies {
        classpath builddeps.buildinfoextractor
        classpath builddeps.bintrayplugin
        classpath builddeps.mobilej
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        consumerProguardFiles 'proguard-rules.pro'
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        multiDexEnabled true

        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-arpks5qhm771a2mfbm4e829va12olmtf'
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            // set JVM arguments for the test JVM(s)
            jvmArgs '-noverify'
            testLogging {
                events "started", "passed", "skipped", "failed"
                outputs.upToDateWhen { false }
            }
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    if (directdependencies) {
        implementation project(':AppInfra')
        implementation project(':registrationApi')
        implementation project(':uAppFwLib')
        implementation project(':uid')
        implementation project(':pif')
        implementation project(':csw')
        implementation project(':catk')
    } else {
        implementation(philipsdeps.AppInfra) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.registrationApi) {
            exclude group: 'com.android.support'
        }

        implementation(philipsdeps.csw) {
            exclude group: 'com.android.support'
        }

        implementation(philipsdeps.catk) {
            exclude group: 'com.android.support'
        }
    }

    implementation(deps.americanwell) {
        exclude group: 'com.android.support'
        transitive = true
    }
    implementation deps.calligraphy
    implementation deps.constraintlayout
    implementation deps.libphonenumber
    implementation deps.play_services_location
    implementation deps.play_services_maps
    implementation deps.support.appcompatv7
    implementation deps.support.design

    testImplementation deps.assertj
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.opengl
    testImplementation deps.robolectric
    testImplementation deps.robolectric_shadows

    androidTestImplementation(deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

tasks.withType(Test) {
    ignoreFailures = true
}