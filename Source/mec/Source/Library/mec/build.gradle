/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = strings.mec.artifactName

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        //classpath builddeps.cdpSCM
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests {
            includeAndroidResources = true

        }
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        versionCode 1
        versionName version + "(" + commitHash + ")"
        testApplicationId "com.philips.cdp.di.mec.test"
        multiDexEnabled true
        generatedDensities = []
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]
    }

    buildTypes {
        release {
           // consumerProguardFiles 'proguard-rules-mec.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }
}
apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    //3rd party
    implementation deps.constraintlayout
    implementation deps.support.recyclerview
    implementation deps.support.appcompatv7
    implementation deps.support.supportv4
    implementation deps.volley
    implementation deps.livedata
    implementation deps.livedata_compiler
    implementation deps.livedata_extensions
    implementation deps.calligraphy
    implementation deps.gson
    implementation deps.libphonenumber
    implementation deps.support.annotations

    // Philips components
    implementation philipsdeps.uid
    if (useprojectdependencies) {
        implementation project(strings.ecs.projectName)
        implementation project(strings.pif.projectName)
        implementation project(strings.prx.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.ail.projectName)
    } else {
        implementation philipsdeps.ecs
        implementation philipsdeps.pif
        implementation philipsdeps.prx
        implementation philipsdeps.uAppFwLib
        implementation philipsdeps.AppInfra
    }

    // Tests
    testImplementation 'org.mockito:mockito-inline:2.13.0' // to mock final class
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'com.bazaarvoice.bvandroidsdk:conversations:7.4.1'
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_classloading_xstream
    testImplementation deps.robolectric
    testImplementation deps.robolectric_junit
    testImplementation deps.robolectric_shadows
    testImplementation deps.robolectric_utils
    testImplementation deps.adobemobilelib
    testImplementation deps.support.design

    testImplementation project(strings.pif.projectName)

    // Android test
    androidTestImplementation deps.assertj
    androidTestImplementation deps.espresso_web
    androidTestImplementation deps.uiautomator
    androidTestImplementation deps.androidx_test.runner
    androidTestImplementation deps.androidx_test.rules

    // Espresso support
    androidTestImplementation(deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    androidTestImplementation(deps.espresso_contrib) {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    // add this for webview testing support
    androidTestImplementation deps.espresso_web
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    annotationProcessor deps.livedata_compiler

    //Kotlin test
    kaptAndroidTest "android.databinding:databinding-compiler:$kotlin_version"
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug')
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("findbugs-exclude.xml")
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {
    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

tasks.withType(Test) {
    ignoreFailures = true
}
repositories {
    mavenCentral()
}
