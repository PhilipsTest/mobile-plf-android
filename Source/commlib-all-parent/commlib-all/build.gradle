/*
 * Copyright (c) Koninklijke Philips N.V., 2016, 2017
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'cdpSCM'

apply from: rootDir.absolutePath + '/../common/gradle/module-tasks.gradle'

buildscript {
    repositories {
        maven { url repos.jcenter }
        maven { url repos.release }
    }

    dependencies {
        classpath(builddeps.cdpscm)
    }
}

import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
version = objcdp.getVersion()

def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

artifactory {
    contextUrl = repos.base
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
            }
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local-android'
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version

        consumerProguardFiles 'proguard-rules.pro'
        buildConfigField "String", "LIBRARY_VERSION", "\"${objcdp.getVersionWithHash()}\""
        publishNonDefault true
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:24.2.1'
    provided deps.support_annotations

    if (findProject(':bluelib')) {
        println("!!! taking local shinelib !!!")
        compile project(':bluelib')
    } else {
        compile(group: 'com.philips.cdp', name: 'shinelib', version: '2.3.2-SNAPSHOT.+')
    }

    if (findProject(':commlib')) {
        println("!!! taking local commlib !!!")
        compile project(':commlib')
    } else {
        compile(group: 'com.philips.cdp', name: 'dicommClientLib', version: '3.1.2-SNAPSHOT.+')
    }

    testCompile deps.mockito

    testCompile 'info.cukes:cucumber-java:1.2.2'
    testCompile 'info.cukes:cucumber-junit:1.2.2'
}

def coverageSourceDirs = ['src/main/java']

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$$ViewBinder*.*',
                       '**/inject/*',
                       '**/*$InjectAdapter.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/Dagger*.*',
                       '**/*_Provide*Factory.*',
                       '**/*_Member*Injector.*',
                       '**/*_Factory.*',
                       '**/PagerTitleStripV22*.*'])

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }

    reports {
        xml.enabled = false
        html.enabled = true
    }
}