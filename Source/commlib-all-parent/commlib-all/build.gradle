/*
 * Copyright (c) Koninklijke Philips N.V., 2016, 2017
 * All rights reserved.
 */
buildscript { bs ->
    apply from: rootDir.absolutePath + '/../common/gradle/project-build.gradle', to: bs
    apply from: rootDir.absolutePath + '/../common/gradle/module.gradle'

    repositories {
        maven { url repos.jcenter }
        maven { url repos.plugin }
    }

    dependencies {
        classpath(builddeps.buildinfoextractor)
        classpath(builddeps.cdpscm)
    }
}

apply plugin: 'com.android.library'
apply plugin: 'pl.droidsonroids.pitest'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

apply from: rootDir.absolutePath + '/../common/gradle/module-tasks.gradle'

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = rootProject.name
version = objcdp.getVersion()

def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

repositories {
    maven { url repos.jcenter }
    maven { url objcdp.getArtifactoryUrl() }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version

        consumerProguardFiles 'proguard-rules.pro'
        buildConfigField "String", "LIBRARY_VERSION", "\"${objcdp.getVersionWithHash()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    publishNonDefault true
}

dependencies {
    compile 'com.android.support:support-v4:24.2.1'
    provided deps.support.annotations

    if (findProject(':bluelib')) {
        debugCompile project(path: ':bluelib', configuration: 'debug')
        releaseCompile project(path: ':bluelib', configuration: 'release')
    } else {
        compile(group: 'com.philips.cdp', name: 'shinelib', version: '2.3.2' + objcdp.getVersionSuffix())
    }

    if (findProject(':commlib')) {
        debugCompile project(path: ':commlib', configuration: 'debug')
        releaseCompile project(path: ':commlib', configuration: 'release')
    } else {
        compile(group: 'com.philips.cdp', name: 'dicommClientLib', version: '3.1.2' + objcdp.getVersionSuffix())
    }

    testCompile deps.mockito

    testCompile 'info.cukes:cucumber-java:1.2.2'
    testCompile 'info.cukes:cucumber-junit:1.2.2'
}

def coverageSourceDirs = ['src/main/java']

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$$ViewBinder*.*',
                       '**/inject/*',
                       '**/*$InjectAdapter.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/Dagger*.*',
                       '**/*_Provide*Factory.*',
                       '**/*_Member*Injector.*',
                       '**/*_Factory.*',
                       '**/PagerTitleStripV22*.*'])

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pitest {
    targetClasses = [
            'com.philips.cdp2.commlib.ble.communication.*',
            'com.philips.cdp2.commlib.ble.discovery.*',
    ]  /* specify target classes to be mutated */
    pitestVersion = "1.1.10"
    avoidCallsTo = ['com.philips.cdp.dicommclient.util.DICommLog']
    threads = 8 /* specify number of threads */
    outputFormats = ['XML', 'HTML'] /* specify output format */
    reportDir = rootDir.absolutePath + "/build/report/pitest/"
}
