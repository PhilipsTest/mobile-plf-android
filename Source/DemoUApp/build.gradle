apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.neenbedankt.android-apt'


buildscript {
    repositories {
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '3.2.0', changing: true
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "devicepairingUApp"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    apply plugin: 'com.jfrog.artifactory'
}

group = 'com.philips.cdp'
version = objcdp.getVersionFromFile("${projectDir}/../../VERSION")

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName version +  "(" + objcdp.getCommitHash() + ")"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]

    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            testCoverageEnabled false
        }
    }

}

dependencies {
	//Coco

	def dp = project.ext.has('useprojectdependencies')

	def usrModule = module(group: 'com.philips.cdp', name: 'registrationApi', version: '11.0.0' + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
	compile(dp ? project(':usr') : usrModule)
	{
		transitive true 
    }

	def ufwModule = module(group: 'com.philips.cdp', name: 'uAppFwLib', version: '1.7.0' + objcdp.getVersionSuffix(), changing: true) 
	compile(dp ? project(':ufw') : ufwModule) 
	{
		transitive true 
    }
	
	def dscModule = module(group: 'com.philips.cdp', name: 'dataServicesUApp', version: '2.0.0' + objcdp.getVersionSuffix(), ext: 'aar') 
	compile(dp ? project(':dsc') : dscModule) 	
	{
        exclude group: 'com.android.support'
        exclude group: 'joda-time', module: 'joda-time'
		transitive true 
    }
	
	def commlibAllModule = module(group: 'com.philips.cdp', name: 'commlib-all', version: '1.5.0' + objcdp.getVersionSuffix(), ext: 'aar') 
	compile(dp ? project(':commlib-all') : commlibAllModule) 
	{
		exclude group: 'com.android.support'
		transitive true 
    }
	
	def cloudcontrollerModule = module(group: 'com.philips.cdp', name: 'cloudcontroller', version: '5.4.0' + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
    compile(dp ? project(':cloudcontroller') : cloudcontrollerModule) 
	
    //Android Support libraries
    compile 'com.android.support:support-fragment:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.3.1'

    //Third party
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.j256.ormlite:ormlite-core:5.0'
    compile 'com.j256.ormlite:ormlite-android:5.0'

    //test
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.dagger'
    }
}
