apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def coverageSourceDirs = [
        '../product-registration-lib/src/main/java'
]
def supportLibraryVer = '25.3.1'
def butterKnifeVer = "7.0.1"
def eventbusVer = "3.0.0"
def jUnitVer = 4.12
buildscript {
    repositories {
        maven { url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '2.1.2', changing: true
        classpath 'com.github.jruby-gradle:jruby-gradle-plugin:1.1.5'
    }
}


//apply from: 'localization.gradle'

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = rootProject.name + "UApp"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}


group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true  // this line will solve this problem

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]}
    dataBinding.enabled = true
    android {
        lintOptions {
            abortOnError false
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':product-registration-lib')
    compile("com.android.support:recyclerview-v7:${supportLibraryVer}") {
        exclude module: "com.android.support"
    }
    compile("com.android.support:appcompat-v7:${supportLibraryVer}") {
        exclude module: "com.android.support"
    }

    compile "com.android.support:design:${supportLibraryVer}"

    compile("com.jakewharton:butterknife:${butterKnifeVer}") {
        exclude module: "com.android.support"
    }
    compile "org.greenrobot:eventbus:${eventbusVer}"



    testCompile("junit:junit:${jUnitVer}") {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }

    androidTestCompile("com.android.support.test.espresso:espresso-core:2.2.2") {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    androidTestCompile("com.android.support.test:runner:0.5") {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    androidTestCompile("com.android.support.test:rules:0.5") {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }

    compile(group: 'com.philips.cdp', name: 'uid', version: '0.1.1'+ objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
        exclude group: 'com.android.support'
        transitive = true
    }

    compile 'com.github.bumptech.glide:glide:3.7.0'
    androidTestCompile 'org.apache.commons:commons-lang3:3.4'

    compile 'org.greenrobot:eventbus:3.0.0'
}