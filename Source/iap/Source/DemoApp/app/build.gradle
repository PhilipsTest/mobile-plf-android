apply plugin: 'com.android.application'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "iapApp"

group = 'com.philips.cdp'

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

        flatDir {
            dirs 'libs'
        }
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('apk')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            }

            artifact("$buildDir/outputs/apk/release/${archivesBaseName}-release.apk")

        pom.withXml {
            def dependenciesNode = asNode().appendNode('dependencies')
            def resolvedArtifacts = configurations.implementation.allDependencies
            resolvedArtifacts.each {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', it.group)
                dependencyNode.appendNode('artifactId', it.name)
                dependencyNode.appendNode('version', it.version)
            }
        }
    }
}
android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        applicationId "com.philips.cdp.di.iapdemo"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        multiDexEnabled true
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            proguardFile 'proguard-rules.pro'
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    println "  projectDir:   " + project.projectDir;
    def propFile = new File("${project.projectDir}/signing.properties")
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            println 'signing.properties found and fully filled in'
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'iap NOPE - signing.properties NOT found'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'iap signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */


    productFlavors {
        simulator {
            applicationId 'com.philips.cdp.di.iapdemo'
            versionCode 2
            versionName "0.17.8"
        }
        device {
            applicationId 'com.philips.cdp.di.iapdemo'
            versionCode 2
            versionName "0.17.8"
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'InvalidPackage'
        disable 'GradleCompatible'
        disable 'MissingTranslation'
        disable 'TypographyFractions', 'TypographyQuotes'
        absolutePaths false
        lintConfig file('lint.xml')

    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    dataBinding {
        enabled = true
    }


}

dependencies {
    implementation deps.support.appcompatv7
    implementation deps.support.customtabs

    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        implementation project(':uid')
        implementation project(':registrationApi')
    } else {
        implementation philipsdeps.uid
        implementation philipsdeps.registrationApi
    }

    implementation deps.constraintlayout

    debugImplementation deps.leakcanary
    releaseImplementation deps.leakcanary_no_op
    testImplementation deps.leakcanary_no_op
    implementation project(':iapUApp')

    androidTestImplementation deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation deps.espresso_contrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}

/*task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}*/

tasks.withType(Test) {
    ignoreFailures = true
}


