apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/tasks.gradle'

def coverageSourceDirs = [
        '../iap/src/main/java'
]

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "iap"

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.default.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        multiDexEnabled true
        testApplicationId "com.philips.cdp.di.iap.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        generatedDensities = []
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]

    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules-iap.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }

    lintOptions {
        abortOnError false
    }

    publishNonDefault true
}

configurations {
    compile.exclude module: 'support-annotations'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

apply from: "build.workaround-missing-resource.gradle"

dependencies {
    //3rd party
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    //Coco
    def dp = project.ext.has('useprojectdependencies')

    if (dp) {
        debugCompile project(path: ':uid', configuration: 'debug')
        releaseCompile project(path: ':uid', configuration: 'release')
        debugCompile project(path: ':registrationApi', configuration: 'debug')
        releaseCompile project(path: ':registrationApi', configuration: 'release')
        debugCompile project(path: ':prx', configuration: 'debug')
        releaseCompile project(path: ':prx', configuration: 'release')
    } else {
        compile philipsdeps.uid
        compile philipsdeps.registrationApi
        compile philipsdeps.prx
    }

    // Tests
    testCompile deps.junit
    testCompile deps.mockito
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
    testCompile('org.robolectric:robolectric:3.4.2') {
        exclude module: 'commons-logging'
        exclude module: 'support-v4'
    }
    testCompile 'org.robolectric:robolectric-utils:3.4-rc2'
    testCompile 'org.robolectric:robolectric-junit:3.4-rc2'

    androidTestCompile deps.assertj
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2';
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2';
    androidTestCompile 'com.android.support.test.espresso:espresso-web:2.2.2'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

    // Android runner and rules support
    androidTestCompile("com.android.support.test:runner:0.5") {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    androidTestCompile("com.android.support.test:rules:0.5") {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    // Espressosupport
    androidTestCompile(deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile(deps.espresso_contrib) {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    // add this for intent mocking support
    // androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'

    // add this for webview testing support
    androidTestCompile deps.espresso_web
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {
    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }

}

tasks.withType(Test) {
    ignoreFailures = true
}
