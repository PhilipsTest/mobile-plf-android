apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: projectDir.absolutePath + '/../../../../build-support/gradle/cdpscm.gradle'

archivesBaseName = "iapUApp"

buildscript {
    apply from: projectDir.absolutePath + '/../../../../build-support/gradle/versions.gradle'

    repositories {
        maven { url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
    }
}

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools


    defaultConfig {
       // applicationId "com.iap.demouapp"
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version
        multiDexEnabled = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]

    }
    buildTypes {
        release {
            minifyEnabled false
           // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'InvalidPackage'
        disable 'GradleCompatible'
        disable 'MissingTranslation'
        disable 'TypographyFractions','TypographyQuotes'
        absolutePaths false
        lintConfig file('lint.xml')
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.support.appcompatv7
    implementation deps.support.supportv4

    androidTestImplementation(deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation deps.junit

    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        implementation project(':iap')
        implementation project(':registrationApi')
        implementation project(':uid')
        implementation project(':AppInfra')
        implementation project(':uAppFwLib')
    } else {
        implementation philipsdeps.iap
        implementation philipsdeps.uid
        implementation philipsdeps.registrationApi
    }

    implementation deps.constraintlayout


}
tasks.withType(Test) {
    ignoreFailures = true
}