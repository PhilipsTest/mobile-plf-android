apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/taskscc.gradle'
/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'

archivesBaseName = "securedblibrary"

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
    }
}

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

    }

    apply plugin: 'com.jfrog.artifactory'
    group = 'com.philips.cdp'
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version
        multiDexEnabled true
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        /*  ndk {
              abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
          }*/
    }

    buildTypes {
        release {
            //   minifyEnabled false
            proguardFiles 'proguard-rules-securedb.pro'
        }
        debug {
            debuggable true
            testCoverageEnabled = true
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {


    if (directdependencies) {
        api project(':AppInfra')
    } else {
        api philipsdeps.AppInfra
    }

    api deps.ormlite.core
    implementation deps.ormlite.android
    api deps.sqlcipher

    androidTestImplementation deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testImplementation deps.junit
    androidTestImplementation deps.mockito
    implementation deps.support.appcompatv7
    implementation deps.support.design
    implementation deps.support.annotations
}

tasks.withType(Test) {
    ignoreFailures = true
}