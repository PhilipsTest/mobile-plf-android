apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'maven'

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '0.1.0', changing: true
    }
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)

allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android' }
    }

    apply plugin: 'com.jfrog.artifactory-upload'

    group = 'com.philips.cdp'

    artifactory {
        contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
        publish {
            repository {
                repoKey = objcdp.getArtifactoryRepoKey('android')
                username = objcdp.getArtifactoryUploadUser()
                password = objcdp.getArtifactoryUploadPwd()
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
            }
        }
        resolve {
            repository {
                repoKey = 'libs-release-local'
            }
        }
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
            maven = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local'
        }
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents"+ File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============
task install (type: Upload) {
    repositories.mavenInstaller {
        pom.version = project.version
        pom.artifactId = project.name
        pom.groupId = project.group
        pom.packaging = "zip"
    }
    configuration = project.configurations.getByName(Dependency.ARCHIVES_CONFIGURATION)
}

artifactoryPublish.dependsOn install

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName version
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources true
            testCoverageEnabled true
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:23+'
    compile 'com.philips.cdp:localeMatch:1.1.1'
    compile(group: 'com.google.code.gson', name: 'gson', version: '2.2.2')
    compile 'com.mcxiaoke.volley:library:1.0.17'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile "org.mockito:mockito-core:1.9.5"
}




task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

