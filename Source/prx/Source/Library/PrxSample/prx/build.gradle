/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/taskscc.gradle'

archivesBaseName = "prx"

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        multiDexEnabled true
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules-prx.pro'
    }
    
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled = true
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'
dependencies {
    implementation deps.support.appcompatv7
    implementation deps.support.design
    implementation deps.support.annotations
    implementation deps.gson
    implementation deps.volley

    if (directdependencies) {
        implementation project(':AppInfra')
    } else {
        implementation philipsdeps.AppInfra
    }

    androidTestImplementation deps.junit
    androidTestImplementation deps.mockito_android
}

tasks.withType(Test) {
    ignoreFailures = true
}