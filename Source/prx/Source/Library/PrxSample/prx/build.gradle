/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
//apply from: project.rootDir.absolutePath + '/build-support/gradle/taskscc.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = strings.prx.artifactName

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        versionCode 1
        versionName version + "(" + commitHash+ ")"
        consumerProguardFiles 'proguard-rules-prx.pro'
        multiDexEnabled true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests {
            includeAndroidResources = true

        }
    }

    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled = true
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'
dependencies {
    implementation deps.androidx.appcompat
    implementation deps.design
    implementation deps.androidx.annotations
    implementation deps.gson
    implementation deps.volley

    if (useprojectdependencies) {
        project.logger.lifecycle('prx: Picking the dependencies from the code')
        implementation project(strings.ail.projectName)
    } else {
        project.logger.lifecycle('prx: Picking the dependencies from the artifactory')
        implementation philipsdeps.AppInfra
    }
    testImplementation deps.junit
    androidTestImplementation deps.junit

    androidTestImplementation deps.json
    testImplementation deps.json

    androidTestImplementation deps.junit
    androidTestImplementation deps.mockito_android
    androidTestImplementation deps.androidx.runner
}

tasks.withType(Test) {
    ignoreFailures = true
}