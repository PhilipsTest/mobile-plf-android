/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'
apply plugin: 'findbugs'
apply plugin: 'pmd'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath builddeps.cdpSCM
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = "RegistrationCoppaSampleApp"

allprojects {
    repositories {
        maven {
            url repos.releaseexternal
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    apply plugin: 'com.jfrog.artifactory'

    group = 'com.philips.cdp'
    
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
        }
        defaults {
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
            publishArtifacts = true
            properties = ['git.commitid': objcdp.getCommitHashLong()]
        }
        defaults {
            publications ('apk')
            publishPom = true
            publishArtifacts = true
        }
    }

    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

//            artifact zipDocuments

//            artifact("$projectDir/dependencies.lock") {
//                classifier = '1stleveldependencies'
//            }

            artifact("$buildDir/outputs/apk/release/${archivesBaseName}-release.apk")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.implementation.allDependencies
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

android {
    signingConfigs {
        release
    }
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools


    defaultConfig {
        applicationId "com.philips.cdp.registration"
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        multiDexEnabled true
        testApplicationId "com.philips.cdp.registration.test"
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"

        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]
    }



    lintOptions {
        abortOnError false
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFile 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
//            proguardFile 'proguard-rules.pro'

        }
    }

    productFlavors {
      /*  simulator {
            applicationId 'com.philips.cdp.registration'
            versionCode 5
            versionName version +  "(" + objcdp.getCommitHash() + ")"
        }*/
        device {
            applicationId 'com.philips.cdp.registration'
            versionCode 5
            versionName version +  "(" + objcdp.getCommitHash() + ")"
            matchingFallbacks = ['debug', 'release']
        }
    }
}

def Properties props = new Properties()
def propFile = new File("${projectDir}/signing.properties")
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
}else {
    println 'coppa signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
repositories { flatDir { dirs 'libs' } }
dependencies {
    implementation project(':coppa')
    implementation deps.support.multidex
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/device/debug/com/philips/')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('RegistrationApi/src/main/java/com')


    reports {
        xml.enabled = true
        html.enabled = false
    }
}

tasks.withType(Test) {
  ignoreFailures = true
}