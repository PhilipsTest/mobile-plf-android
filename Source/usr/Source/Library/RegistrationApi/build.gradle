apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.jakewharton.butterknife'
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/tasks.gradle'

//apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.releaseexternal
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {

        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
        classpath deps.retrolambda_gradle
        classpath deps.butterknife_gradle
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "registrationApi"

allprojects {
    repositories {

        maven {
            url repos.releaseexternal
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    apply plugin: 'com.jfrog.artifactory'

    group = 'com.philips.cdp'

}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
        }
        defaults {
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
            publishArtifacts = true
            publications('aar')
            properties = ['git.commitid': objcdp.getCommitHashLong()]
        }
    }

    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.default.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionName version + "(" + objcdp.getCommitHash() + ")"
        testApplicationId "com.philips.cdp.registration.test"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }


    lintOptions {
        abortOnError false
    }


    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules-usr.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    publishNonDefault true
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile deps.constraintlayout


    def dp = project.ext.has('useprojectdependencies')

    if (dp) {
        debugCompile project(path: ':uid', configuration: 'debug')
        releaseCompile project(path: ':uid', configuration: 'release')
        debugCompile project(path: ':uAppFwLib', configuration: 'debug')
        releaseCompile project(path: ':uAppFwLib', configuration: 'release')
        debugCompile project(path: ':jump', configuration: 'debug')
        releaseCompile project(path: ':jump', configuration: 'release')
        debugCompile project(path: ':hsdp', configuration: 'debug')
        releaseCompile project(path: ':hsdp', configuration: 'release')
        debugCompile project(path: ':pif', configuration: 'debug')
        releaseCompile project(path: ':pif', configuration: 'release')
    } else {
        compile philipsdeps.uid
        compile philipsdeps.uAppFwLib
        compile project(':jump')
        compile project(':hsdp')
    }

    compile deps.libphonenumber
    annotationProcessor deps.butterknife_compiler
    compile deps.butterknife
    annotationProcessor deps.dagger.compiler
    compile deps.dagger.dagger
    provided deps.javax_annotation
    compile deps.rxjava2
    compile deps.rxbinding
    retrolambdaConfig deps.retrolambda
    androidTestCompile deps.junit
    androidTestCompile deps.dexmaker_google
    androidTestCompile deps.dexmaker_google_mockito
    testCompile deps.junit
    testCompile deps.mockito
    testCompile deps.robolectric_utils
    testCompile deps.robolectric_junit2
    testCompile deps.robolectric
    testCompile deps.robolectric_shadows
    androidTestCompile deps.android_testrunner
    // Set this dependency to use JUnit 4 rules
    androidTestCompile deps.android_testrules
    // Set this dependency to build and run Espresso tests
    androidTestCompile deps.espresso_core
    // Set this dependency to build and run UI Automator tests
    androidTestCompile deps.uiautomator
    compile deps.support.supportv4
    compile deps.greenrobot
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug/com/philips/')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java/com')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

def coverageSourceDirs = [
        '../RegistrationApi/src/main/java'
]


tasks.withType(Test) {
    ignoreFailures = true
}