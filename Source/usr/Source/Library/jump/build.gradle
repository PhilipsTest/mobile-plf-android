apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.jakewharton.butterknife'

/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

//def libVersionNumber = new File("${projectDir}/../../../VERSION_JUMP").text.trim()

//apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.releaseexternal
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
        classpath deps.retrolambda_gradle
        classpath deps.butterknife_gradle
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "jump"

allprojects {
    repositories {
        maven {
            url repos.releaseexternal
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    apply plugin: 'com.jfrog.artifactory'
    group = 'com.philips.cdp'
}

group = 'com.philips.cdp'
version = platformversion

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.default.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionName version
        multiDexEnabled true

        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"

        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]

    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules-jump.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
//            proguardFile 'proguard-rules.pro'
        }
    }
    publishNonDefault true
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    def dp = project.ext.has('useprojectdependencies')

    if (dp) {
        debugCompile project(path: ':AppInfra', configuration: 'debug')
        releaseCompile project(path: ':AppInfra', configuration: 'release')
    } else {
        compile philipsdeps.AppInfra
    }

    annotationProcessor deps.immutables
    annotationProcessor deps.dagger.compiler
    annotationProcessor deps.frankiesardo_value_processor

    provided deps.javax_annotation

    compile deps.apache
    compile deps.okhttp
    compile deps.okhttp_apache
    compile deps.squareup_okio
    compile deps.support.appcompatv7
    compile deps.wechat

    //WeChat China
    compile files('libs/libammsdk.jar')
    compile deps.apache
    compile deps.dagger.dagger
    compile deps.jackson_databind
    compile deps.multidex
    compile deps.openid_appauth
    compile deps.rxjava2
    compile deps.squareup_picasso

    testCompile deps.frankiesardo_value
    testCompile deps.junit
    testCompile deps.mockito
    testCompile deps.robolectric

    // JUnit4 Rules
    androidTestCompile deps.android_testrules
    // Android JUnit Runner
    androidTestCompile deps.android_testrunner
    androidTestCompile deps.dexmaker_google
    androidTestCompile deps.frankiesardo_value
    androidTestCompile deps.junit
    androidTestCompile deps.mockito_android

    retrolambdaConfig deps.retrolambda
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

tasks.withType(Test) {
    ignoreFailures = true
}
