apply plugin: 'com.android.application'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "uidApp"

group = 'com.philips.cdp'

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('apk')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

//            artifact("$projectDir/dependencies.lock") {
//                classifier = '1stleveldependencies'
//            }

            artifact("$buildDir/outputs/apk/release/${archivesBaseName}-release.apk")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.implementation.allDependencies
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
/*
hockeyapp {
    apiToken = "b9d6e2f453894b4fbcb161b33a94f6c8"
    commitSha = objcdp.getCommitHashLong()
    buildServerUrl = objcdp.getArtifactoryUrl()
    releaseType = 2 // alpha
    notify = 1
    mappingFileNameRegex = "mapping.txt"
    mandatory = 1
    status = 2
    notesType = 1

//    notes = new File(file(objcdp.getExternalDocPath() + '/ReleaseNotes.md').absolutePath).getText('UTF-8')
}
=======
    notes = new File(file(objcdp.getExternalDocPath() + '/ReleaseNotes.md').absolutePath).getText('UTF-8')
}*/

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        applicationId "com.philips.platform.catalogapp"
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    dataBinding.enabled = true

    signingConfigs {
        TestPhilipsStore {
            keyAlias 'philips'
            keyPassword 'philips'
            storeFile file("${projectDir}/../extra/signing/UIT_GoogleBeta_KeyStore.jks")
            storePassword 'philips'
        }
        debug {
            storeFile file("${projectDir}/../extra/signing/debug.keystore")
        }
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            signingConfig signingConfigs.TestPhilipsStore
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'asm-license.txt'
        exclude 'LICENSE.txt'

    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }


}

dependencies {
    implementation(deps.support.recyclerview) {
        exclude module: "com.android.support"
    }
    implementation(deps.support.appcompatv7) {
        exclude module: "com.android.support"
    }


    implementation(deps.butterknife) {
        exclude module: "com.android.support"
    }
    implementation deps.greenrobot

    implementation project(':uid')

    testImplementation(deps.junit) {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }

    androidTestImplementation(deps.espresso_core) {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    androidTestImplementation(deps.android_testrunner) {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    androidTestImplementation(deps.android_testrules) {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    implementation deps.support.design
    implementation deps.glide
    implementation deps.calligraphy
    androidTestImplementation deps.android_test_commons

}