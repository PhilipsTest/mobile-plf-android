apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def supportLibraryVer = '26.0.2'
def minSdkVer = 21
def compileSdkVer = 26
def targetSdkVer = 26
def buildToolsVer = "26.0.2"
def jUnitVer = 4.12

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven { url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = 'uid'

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    apply plugin: 'com.jfrog.artifactory'
    group = 'com.philips.cdp'
}

group = 'com.philips.cdp'
version = objcdp.getVersion(versions.uid_uid)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode 1
        versionName version

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles "proguard-rules.pro"
        }
        debug {
            testCoverageEnabled true
        }
    }

    signingConfigs {
        debug {
            storeFile project.file('../../CatalogApp/extra/signing/debug.keystore')
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    testCompile "junit:junit:${jUnitVer}"

    compile "com.android.support:appcompat-v7:${supportLibraryVer}"
    compile "com.android.support:design:${supportLibraryVer}"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    compile 'uk.co.chrisjenx:calligraphy:2.3.0'

    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        project(':IconFont')
    } else {
        compile(group: 'com.philips.cdp', name: 'IconFont', version: versions.icf_iconFont + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
        {
            transitive = true
        }
    }

    //test
    androidTestCompile("com.android.support.test.espresso:espresso-core:2.2.2") {
        exclude module: "com.android.support"
    }
    androidTestCompile("com.android.support.test:runner:0.5") {
        exclude module: "com.android.support"
    }
    androidTestCompile("com.android.support.test:rules:0.5") {
        exclude module: "com.android.support"
    }
    androidTestCompile 'org.apache.commons:commons-lang3:3.4'

}
