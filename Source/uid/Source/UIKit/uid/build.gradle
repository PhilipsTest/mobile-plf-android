apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: project.rootDir.absolutePath + '/build-support/gradle/taskscc.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'

archivesBaseName = 'uid'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven { url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
    }
}

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    apply plugin: 'com.jfrog.artifactory'
    group = 'com.philips.cdp'
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles "proguard-rules.pro"
        }
        debug {
            testCoverageEnabled=true
        }
    }

    signingConfigs {
        debug {
            storeFile project.file('../../CatalogApp/extra/signing/debug.keystore')
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }


}
apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

dependencies {
    testImplementation deps.junit

    implementation deps.support.appcompatv7
    implementation deps.support.design
    implementation deps.constraintlayout
    implementation deps.calligraphy



    if (directdependencies) {
        implementation project(':IconFont')
    } else {
        implementation philipsdeps.IconFont
    }

    //test
    androidTestImplementation(deps.espresso_core) {
        exclude module: "com.android.support"
    }
    androidTestImplementation(deps.android_testrunner) {
        exclude module: "com.android.support"
    }
    androidTestImplementation(deps.android_testrules) {
        exclude module: "com.android.support"
    }
    androidTestImplementation deps.android_test_commons

}

tasks.withType(Test) {
    ignoreFailures = true
}