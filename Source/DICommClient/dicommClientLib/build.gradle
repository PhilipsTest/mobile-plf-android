/*
 * (c) Koninklijke Philips N.V., 2016, 2017.
 *     All rights reserved.
 */

import com.philips.cdp.cdpSCM

apply plugin: 'com.android.library'
apply plugin: 'pl.droidsonroids.pitest'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'cdpSCM'

apply from: rootDir.absolutePath + '/../common/gradle/module-tasks.gradle'

buildscript {
    repositories {
        maven { url repos.jcenter }
        maven { url repos.release }
    }

    dependencies {
        classpath(builddeps.cdpscm)
    }
}

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
version = objcdp.getVersion()

artifactory {
    contextUrl = repos.base
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
        }
        defaults {
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local'
        }
    }
}

def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        versionCode 1
        versionName version
        consumerProguardFiles 'proguard-rules.pro'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude 'asm-license.txt'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.philips.cdp:cloudcontroller-api:3.1.1-SNAPSHOT'
    testCompile 'com.philips.cdp:cloudcontroller:5.1.1-SNAPSHOT'

    provided deps.support_annotations
    compile deps.gson

    testCompile deps.junit
    testCompile deps.powermock_mockito
    testCompile deps.powermock_junit

    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    testCompile('org.robolectric:robolectric:3.1.4') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile('org.robolectric:shadows-support-v4:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    androidTestCompile deps.junit
    androidTestCompile deps.mockito

    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.1'
}

pitest {
    targetClasses = [
            'com.philips.commlib.cloud.*',
            'com.philips.commlib.core.*',
            'com.philips.commlib.lan.communication.*',
            'com.philips.commlib.lan.context.*',
            'com.philips.commlib.lan.discovery.*',
    ]  /* specify target classes to be mutated */
    pitestVersion = "1.1.10"
    avoidCallsTo = ['com.philips.cdp.dicommclient.util.DICommLog']
    threads = 8 /* specify number of threads */
    outputFormats = ['XML', 'HTML'] /* specify output format */
    reportDir = rootDir.absolutePath + "/build/report/pitest/"
}