/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath builddeps.cdpSCM
    }
}

archivesBaseName = "ewsApp"

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            /*
            release in the path done here to prevent local publishing, possibility to publish only release
             which comes from jenkins
             */
            artifact("$buildDir/outputs/aar/${archivesBaseName}_release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.implementation.allDependencies
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        applicationId "com.philips.platform.ews.demoapplication"
        versionCode 1
        versionName "1.0"
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            storeFile file("demoapp-keystore.jks")
            storePassword "philips"
            keyAlias "philips"
            keyPassword "philips"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            pseudoLocalesEnabled true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def appName = "ews_demo_app_"
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def newName = "${appName}${gitBranch()}_${buildType}_${getMyVersionCode()}.apk"
            output.outputFile = new File(output.outputFile.parent, newName)
        }
    }
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch += line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch.replaceAll("/", "-")
}

def getMyVersionCode() {
    def buildNumber = project.hasProperty('buildNumber') ? buildNumber.toInteger() : 1
    buildNumber
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    annotationProcessor deps.dagger.compiler

    // Philips Dependencies
    implementation project(strings.ewsuapp.projectName)

    // 3rd party deps
    implementation deps.constraintlayout
    implementation deps.dagger.dagger
    implementation deps.greenrobot
    implementation deps.multidex
    implementation deps.support.animvecdraw
    implementation deps.support.annotations
    implementation deps.support.appcompatv7
    implementation deps.support.cardview
    implementation deps.support.design
}


