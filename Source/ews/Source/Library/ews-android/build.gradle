/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = strings.ews.artifactName

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath builddeps.cdpSCM
    }
}

android {
    def assignedVersionNumber = version

    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        versionName assignedVersionNumber
        consumerProguardFiles('proguard-rules.txt', 'proguard-rules-lib.txt')
    }

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    /** Proguard on library reference: https://developer.android.com/studio/projects/android-library.html#Considerations
     *  Also reference with DLS library
     *  Generated aar file keep proguard.txt which take part in proguard process when added in app
     **/
    buildTypes {
        debug {

        }
        release {

        }
    }
}

apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    if (directdependencies) {
        implementation project(strings.uit.projectName)
        implementation project(strings.cmllan.projectName)
        implementation project(strings.uid.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.ail.projectName)
        implementation project(strings.cmlapi.projectName)
    } else {
        implementation philipsdeps.uikitLib
        implementation philipsdeps.commlib_lan
        implementation philipsdeps.uid
        implementation philipsdeps.uAppFwLib
        implementation philipsdeps.AppInfra
    }

    // Android/Google
    implementation deps.support.annotations
    implementation deps.support.design
    implementation deps.support.appcompatv7
    implementation deps.calligraphy
    implementation deps.support.animvecdraw

    // External
    implementation deps.dagger.dagger
    annotationProcessor deps.dagger.compiler

    // Test
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_classloading_xstream
}

tasks.withType(Test) {
    ignoreFailures = true
}
