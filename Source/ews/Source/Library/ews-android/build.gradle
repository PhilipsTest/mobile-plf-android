apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

buildscript {
    apply from: projectDir.absolutePath + '/../scripts/versions.gradle'
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username "readonly"
                password "123qweasdzxc"
            }
        }
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local'
            credentials {
                username "readonly"
                password "123qweasdzxc"
            }
        }

        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath "com.getkeepsafe.dexcount:dexcount-gradle-plugin:${versionsExternal.dexCount}"
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "ews-android"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url 'https://maven.google.com'
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(platformversion)

//start publishing
artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }

    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            /*
            release in the path done here to prevent local publishing, possibility to publish only release
             which comes from jenkins
             */
            artifact("$buildDir/outputs/aar/${archivesBaseName}_release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.default.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

//end publishing

android {
    def assignedVersionNumber = version
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools
    publishNonDefault true
    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        versionName assignedVersionNumber
        consumerProguardFiles('proguard-rules.txt', 'proguard-rules-lib.txt')
    }

    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    /** Proguard on library reference: https://developer.android.com/studio/projects/android-library.html#Considerations
     *  Also reference with DLS library
     *  Generated aar file keep proguard.txt which take part in proguard process when added in app
     **/
    buildTypes {
        debug {

        }
        release {

        }
    }

    lintOptions {
        abortOnError false
    }

    jacocoAndroidUnitTestReport {
        csv.enabled false
        html.enabled true
        xml.enabled false
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def libName = archivesBaseName
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def newName
            if (buildType.equalsIgnoreCase("debug")) {
                newName = "${libName}_${buildType}_${assignedVersionNumber}.aar"
            } else {
                newName = "${libName}_${buildType}.aar"
            }
            output.outputFile = new File(output.outputFile.parent, newName)
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Android/Google
    compile "com.android.support:support-annotations:${versions.support}"
    compile "com.android.support:design:${versions.support}"
    compile "com.android.support:appcompat-v7:${versions.support}"
    compile "com.android.support:animated-vector-drawable:${versions.support}"

    // Philips Dependencies
    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        debugCompile project(path: ':uikitLib', configuration: 'debug')
        releaseCompile project(path: ':uikitLib', configuration: 'release')
        debugCompile project(path: ':commlib-lan', configuration: 'debug')
        releaseCompile project(path: ':commlib-lan', configuration: 'release')
        debugCompile project(path: ':uid', configuration: 'debug')
        releaseCompile project(path: ':uid', configuration: 'release')
        debugCompile project(path: ':uAppFwLib', configuration: 'debug')
        releaseCompile project(path: ':uAppFwLib', configuration: 'release')
    } else {
        compile(group: 'com.philips.cdp', name: 'uikitLib', version: platformversion + objcdp.getVersionSuffix(), changing: true)
        compile(group: 'com.philips.cdp', name: 'commlib-lan', version: platformversion + objcdp.getVersionSuffix(), changing: true)
        compile(group: 'com.philips.cdp', name: 'uid', version: platformversion + objcdp.getVersionSuffix(), changing: true)
        compile(group: 'com.philips.cdp', name: 'uAppFwLib', version: platformversion + objcdp.getVersionSuffix(), changing: true)
    }

    // External
    compile "com.google.dagger:dagger:2.9"
    annotationProcessor "com.google.dagger:dagger-compiler:2.9"


    // Test

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile "org.powermock:powermock-module-junit4:1.6.5"
    testCompile "org.powermock:powermock-api-mockito:1.6.5"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.5"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.5"

}
