apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/tasks.gradle'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username "readonly"
                password "123qweasdzxc"
            }
        }
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local'
            credentials {
                username "readonly"
                password "123qweasdzxc"
            }
        }

        mavenCentral()
    }
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "ews-android"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

//start publishing
artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }

    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            /*
            release in the path done here to prevent local publishing, possibility to publish only release
             which comes from jenkins
             */
            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.implementation.allDependencies
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

//end publishing

android {
    def assignedVersionNumber = version
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        versionName assignedVersionNumber
        consumerProguardFiles('proguard-rules.txt', 'proguard-rules-lib.txt')
    }

    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
    }

    /** Proguard on library reference: https://developer.android.com/studio/projects/android-library.html#Considerations
     *  Also reference with DLS library
     *  Generated aar file keep proguard.txt which take part in proguard process when added in app
     **/
    buildTypes {
        debug {

        }
        release {

        }
    }

    lintOptions {
        abortOnError false
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Philips Dependencies
    def dp = project.ext.has('useprojectdependencies')

    if (dp) {
        implementation project(':uikitLib')
        implementation project(':commlib-lan')
        implementation project(':uid')
        implementation project(':uAppFwLib')
        implementation project(':AppInfra')
        implementation project(':commlib')
        implementation project(':commlib-api')
    } else {
        implementation philipsdeps.uikitLib
        implementation philipsdeps.commlib_lan
        implementation philipsdeps.uid
        implementation philipsdeps.uAppFwLib
    }

    // Android/Google
    implementation deps.support.annotations
    implementation deps.support.design
    implementation deps.support.appcompatv7
    implementation deps.calligraphy
    implementation deps.support.animvecdraw

    // External
    implementation deps.dagger.dagger
    annotationProcessor deps.dagger.compiler

    // Test
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_classloading_xstream

}
tasks.withType(Test) {
    ignoreFailures = true
}