buildscript {
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'pl.droidsonroids.pitest'

apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        testApplicationId "com.philips.platform.dataservices.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules.pro'
        generatedDensities = []
        manifestPlaceholders = ['appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp']
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }

    testOptions {
        unitTests.returnDefaultValues = true

        unitTests.all {
            // set JVM arguments for the test JVM(s)
            jvmArgs '-noverify'
            testLogging {
                events "started", "passed", "skipped", "failed"
                outputs.upToDateWhen { false }
            }
        }
    }

    publishNonDefault true
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    def dp = project.ext.has('useprojectdependencies')

    if (dp) {
        debugCompile project(path: ':mya-catk', configuration: 'debug')
        releaseCompile project(path: ':mya-catk', configuration: 'release')
        debugCompile project(path: ':AppInfra', configuration: 'debug')
        releaseCompile project(path: ':AppInfra', configuration: 'release')
    } else {
        compile (philipsdeps.mya_catk) {
            exclude group: 'com.google.code.findbugs', module: 'jsr305'
        }
        compile philipsdeps.AppInfra
    }

    compile(deps.support.annotations) {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile deps.greenrobot
    compile deps.joda_time
    compile deps.retrofit1
    compile deps.okhttp
    compile deps.javax_inject

    compile deps.dagger.dagger
    apt deps.dagger.compiler
    provided deps.glassfish_annotation
    provided deps.javax_annotation
    testApt deps.dagger.compiler

    testCompile deps.junit
    testCompile deps.mockito
    testCompile deps.powermock_api_mockito
    testCompile deps.powermock_junit
    testCompile deps.assertj

    testCompile(deps.robolectric) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

tasks.withType(Test) {
    ignoreFailures = true
}

pitest {
    targetClasses = ['com.philips.platform.core.*']  //by default "${project.group}.*"
    pitestVersion = '1.1.0' //not needed when a default PIT version should be used
    threads = 1
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    excludedClasses = [
        '**Factory*',
        '**_MembersInjector*',
        'com.philips.platform.core.injection.ApplicationModuleTest',
        'com.philips.platform.core.utils.EventingImplTest'
    ]
}