/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'pl.droidsonroids.pitest'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = strings.dsc.artifactName

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath builddeps.cdpSCM
        classpath builddeps.pitest_solidsoft
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        multiDexEnabled true
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        testApplicationId "com.philips.platform.dataservices.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules.pro'
        generatedDensities = []
        manifestPlaceholders = ['appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp']
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            // set JVM arguments for the test JVM(s)
            jvmArgs '-noverify'
            testLogging {
                events "started", "passed", "skipped", "failed"
                outputs.upToDateWhen { false }
            }
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compileOnly deps.javax_annotation
    annotationProcessor deps.dagger.compiler

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation deps.greenrobot
    implementation deps.joda_time
    implementation deps.retrofit1
    implementation deps.okhttp
    implementation deps.javax_inject
    implementation deps.dagger.dagger
    implementation deps.support.annotations

    if (directdependencies) {
        implementation project(strings.catk.projectName)
        implementation project(strings.pif.projectName)
        implementation project(strings.ail.projectName)
    } else {
        implementation(philipsdeps.catk) {
            exclude group: 'com.google.code.findbugs', module: 'jsr305'
        }
        implementation philipsdeps.pif
        implementation philipsdeps.AppInfra
    }

    testAnnotationProcessor deps.dagger.compiler

    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit
    testImplementation deps.assertj
    testImplementation deps.robolectric
}

tasks.withType(Test) {
    ignoreFailures = true
}

pitest {
    targetClasses = ['com.philips.platform.core.*']  //by default "${project.group}.*"
    pitestVersion = '1.1.0' //not needed when a default PIT version should be used
    threads = 1
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    excludedClasses = [
            '**Factory*',
            '**_MembersInjector*',
            'com.philips.platform.core.injection.ApplicationModuleTest',
            'com.philips.platform.core.utils.EventingImplTest'
    ]
}