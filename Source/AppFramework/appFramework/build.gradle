apply plugin: 'com.android.application'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

buildscript {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/plugins-release-local"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }

    dependencies {
        classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12"
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '2.1.0', changing: true
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = rootProject.name

allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local' }
        maven { url objcdp.getArtifactoryUrl() }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('apk')
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
def zipSrc = file(buildDir.name + "/distributions/$project.name-$version-src" + '.tgz' )
artifacts {
    archives zipDoc
    archives zipSrc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}

task tgzTask(type: Tar) {
    classifier = 'src'
    from projectDir
    include '**/*'
    exclude ('build')
    extension = 'tgz'
    compression = Compression.GZIP
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            /* if (new File("$buildDir/outputs/apk/${archivesBaseName}-release.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-release.apk")
            } else if (new File("$buildDir/outputs/apk/${archivesBaseName}-release-unsigned.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-release-unsigned.apk")
            } else if (new File("$buildDir/outputs/apk/${archivesBaseName}-debug.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-debug.apk")
            } else if (new File("$buildDir/outputs/apk/${archivesBaseName}-AppFrameworkHamburger-debug.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-AppFrameworkHamburger-debug.apk")
            } else if (new File("$buildDir/outputs/apk/${archivesBaseName}-AppFrameworkTabbed-debug.apk").exists()) {
                artifact("$buildDir/outputs/apk/${archivesBaseName}-AppFrameworkTabbed-debug.apk")
            } else {
            } */

            artifact("$buildDir/outputs/apk/${archivesBaseName}-release.apk")

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.philips.platform.referenceapp"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName objcdp.getVersionWithHash()
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi 25
        // applicationId "net.gouline.jacoco"
        renderscriptSupportModeEnabled true
        testApplicationId "com.philips.platform.appframework.test"
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        multiDexEnabled true

        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
            manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-arpks5qhm771a2mfbm4e829va12olmtf'
            ]
    }

    productFlavors {
        AppFrameworkHamburger {
            applicationId = "com.philips.platform.referenceapp"
            resValue "string", "af_app_name", "ReferenceApp"

        }
        AppFrameworkTabbed {
            applicationId = "com.philips.platform.referenceapp"
            resValue "string", "af_app_name", "ReferenceApp"
        }

        AppFrameworkHamburgerDemo {
            applicationId = "com.philips.platform.referenceapp"
            resValue "string", "af_app_name", "ReferenceApp"
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                if (variant.productFlavors[0].name.equals("AppFrameworkHamburger")) {
                    output.outputFile = new File(output.outputFile.parent,
                            output.outputFile.name.replace("-AppFrameworkHamburger", ""));
                }
            }
        }
        applicationVariants.all { variant ->
            def productFlavor = variant.productFlavors[0] != null ? "${variant.productFlavors[0].name.capitalize()}" : ""
            def buildType = "${variant.buildType.name.capitalize()}"
            tasks["compile${productFlavor}${buildType}UnitTestSources"].dependsOn(tasks["merge${productFlavor}${buildType}Assets"])
        }

    }

    android.variantFilter { variant ->
        if(variant.buildType.name.equals('leakCanary') && variant.getFlavors().get(0).name.equals('AppFrameworkHamburgerDemo')) {
            variant.setIgnore(true);
        }
        if(variant.buildType.name.equals('release') && variant.getFlavors().get(0).name.equals('AppFrameworkHamburgerDemo')) {
            variant.setIgnore(true);
        }
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    dexOptions {
        preDexLibraries = false
        jumboMode = false
    }
    buildTypes {

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            testCoverageEnabled = true
        }


        leakCanary {
            minifyEnabled false
            shrinkResources false
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    def propFile = new File('signing.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'

        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libssdpJNI.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude "lib/mips/librealm-jni.so"
        exclude 'lib/mips/lib.so'
        exclude 'lib/mips/libcrashlytics-envelope.so'
        exclude 'lib/mips/libcrashlytics.so'
        exclude 'lib/mips64/libcrashlytics-envelope.so'
        exclude 'lib/mips64/libcrashlytics.so'
        exclude 'lib/mips64/libssdpJNI.so'

        pickFirst 'lib/x86/librsjni.so'
        pickFirst 'lib/x86/libblasV8.so'
        pickFirst 'lib/x86/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/librsjni.so'
        pickFirst 'lib/armeabi-v7a/libblasV8.so'
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/librsjni.so'
        exclude 'META-INF/INDEX.LIST'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        // set JVM arguments for the test JVM(s)
        unitTests.all {
            jvmArgs '-noverify'
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

    resolutionStrategy.force 'com.android.support:support-annotations:25.3.1'
}

dependencies {
    compile ('com.android.support:support-annotations:25.3.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    debugCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    leakCanaryCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.dagger'
    }

    debugCompile 'com.facebook.stetho:stetho:1.2.0'

    compile "com.j256.ormlite:ormlite-core:5.0"
    compile "com.j256.ormlite:ormlite-android:5.0"
    compile 'com.android.support:multidex:1.0.1'

    compile(group: 'com.philips.cdp', name: 'product-registration-lib_DLS', version: '2.4.0' + objcdp.getVersionSuffix(), ext: 'aar',changing: true) {
        transitive = true
    }

    compile(group: 'com.philips.cdp', name: 'digitalCare_DLS', version: '7.4.0' + objcdp.getVersionSuffix(), ext: 'aar',changing: true) {
        transitive=true
    }

    compile(group: 'com.philips.cdp', name: 'iap_DLS', version: '5.3.0' + objcdp.getVersionSuffix(), ext: 'aar',changing: true) {
        transitive=true
    }

    compile(group: 'com.philips.cdp', name: 'dataServices_DLS', version: '1.1.0' + objcdp.getVersionSuffix(), ext: 'aar') {
        exclude group: 'com.android.support'
        transitive = true
    }

    compile(group: 'com.philips.cdp', name: 'commlib-all', version: '1.3.1' + objcdp.getVersionSuffix(), ext: 'aar'){
        exclude group: 'com.android.support'
        transitive = true
    }
    testCompile 'junit:junit:4.12'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testCompile 'org.robolectric:robolectric:3.3.1'
    testCompile 'org.robolectric:shadows-multidex:3.3.1'
    testCompile 'org.robolectric:shadows-support-v4:3.3.1'
    testCompile 'org.mockito:mockito-all:1.10.17'
    testCompile "com.squareup.assertj:assertj-android:${androidAssertJVer}"
    compile project(':pushnotification')
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}


    project.afterEvaluate {
        // Grab all build types and product flavors
        def buildTypes = android.buildTypes.collect { type ->
            type.name
        }
        def productFlavors = android.productFlavors.collect { flavor ->
            flavor.name
        }
        // When no product flavors defined, use empty
        if (!productFlavors) productFlavors.add('')

        //iterate over the flavors

        productFlavors.each {

            productFlavorName ->
//iterate over build types like debug,release,prod etc.
                buildTypes.each {

                    buildTypeName ->
                        //sourceName — e.g. freeDebug ,sourcePath — e.g. free/debug
                        def sourceName, sourcePath
                        if (!productFlavorName) {
                            sourceName = sourcePath = "${buildTypeName}"
                        } else {
                            sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                            sourcePath = "${productFlavorName}/${buildTypeName}"
                        }
                        // testTaskName —  e.g. testFreeDebugtest task that the coverage task depends on,
                        def testTaskName = "test${sourceName.capitalize()}UnitTest"
                        // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
                        task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                            group = "Reporting"
                            description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                            classDirectories = fileTree(
                                    dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                                    excludes: [
                                            '**/R.class',
                                            '**/R$*.class',
                                            '**/*$ViewInjector*.*',
                                            '**/*$ViewBinder*.*',
                                            '**/BuildConfig.*',
                                            '**/Manifest*.*',
                                            '**/com/philips/platform/baseapp/screens/dataservices/**'
                                    ]
                            )
                            def coverageSourceDirs = [
                                    "src/main/java",
                                    "src/$productFlavorName/java",
                                    "src/$buildTypeName/java"
                            ]
                            additionalSourceDirs = files(coverageSourceDirs)
                            sourceDirectories = files(coverageSourceDirs)
                            executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                            reports {
                                //enables and disable the type of file you need
                                xml.enabled = false
                                html.enabled = true
                            }
                        }

                }
        }
    }
