apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../appFramework/src/main/java'
]
buildscript {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '0.1.0', changing: true
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath "com.github.dcendents:android-maven-gradle-plugin:1.5"
    }
}

apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)


allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-stage-local-android'
        }
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-snapshot-local-android' }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}


group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
        contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
            }
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local'
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
def zipSrc = file(buildDir.name + "/distributions/$project.name-$version-src" + '.tgz' )
artifacts {
    archives zipDoc
    archives zipSrc
}

task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents"+ File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}

task tgzTask(type: Tar) {
    classifier = 'src'
    from projectDir
    include '**/*'
    exclude ('build')
    extension = 'tgz'
    compression = Compression.GZIP
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 24
        versionCode 1
        versionName "0.3.0"
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        testApplicationId "com.philips.platform.appframework.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    productFlavors {
        AppFrameworkHamburger {
            applicationId = "com.philips.platform.hamburger"
            resValue "string", "af_app_name", "AF Hamburger"

        }
        AppFrameworkTabbed {
            applicationId = "com.philips.platform.tabbed"
            resValue "string", "af_app_name", "AF Tabbed"
        }
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    dexOptions {
        incremental = false;
        preDexLibraries = false
        jumboMode = false
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            testCoverageEnabled true
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    def propFile = new File('signing.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'

        pickFirst 'lib/mips/librsjni.so'
        pickFirst 'lib/mips/libblasV8.so'
        pickFirst 'lib/mips/libRSSupport.so'
        pickFirst 'lib/x86/librsjni.so'
        pickFirst 'lib/x86/libblasV8.so'
        pickFirst 'lib/x86/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/librsjni.so'
        pickFirst 'lib/armeabi-v7a/libblasV8.so'
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/librsjni.so'
        exclude 'META-INF/INDEX.LIST'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    testCompile('org.mockito:mockito-core:1.10.19')
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:support-annotations:24.0.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:design:24.0.0'
    compile 'com.android.support:appcompat-v7:24.2.1'

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Module projects
//    compile project(':dataServices')
    // DEBUG
    debugCompile 'com.facebook.stetho:stetho:1.2.0'

    compile "com.j256.ormlite:ormlite-core:4.48"
    compile "com.j256.ormlite:ormlite-android:4.48"

    compile(group: 'com.philips.cdp', name: 'product-registration-lib', version: '2.1.0-SNAPSHOT', ext: 'aar', changing: true) {
        transitive = true
    }

    compile(group: 'com.philips.cdp', name: 'digitalCare', version: '7.1.0-SNAPSHOT', ext: 'aar', changing: true){
        transitive=true
    }

    compile(group: 'com.philips.cdp', name: 'iap', version: '5.1.0-SNAPSHOT', ext: 'aar', changing: true){
        transitive=true
    }

    compile(group: 'com.philips.cdp', name: 'dataServices', version: '0.1.0-SNAPSHOT', ext: 'aar') {
        exclude group: 'com.android.support'
        transitive = true
    }

    compile(group: 'com.philips.cdp', name: 'dicommClientLib', version: '1.2.2', ext: 'aar')

    compile(group: 'com.philips.cdp', name: 'shinelib', version: '2.0.0', ext: 'aar')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.17'
    testCompile "org.robolectric:robolectric:3.1.1"

}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

//    jvmArgs = ["-XX:-UseSplitVerifier"]
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../appFramework/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/response/*/*.class',
                       '**/view/*.class',
                       '**/adapters/*.class',
                       '**/analytics/*.class',
                       '**/utils/*.class',
                       '**/activity/*.class',
                       '**/Fragments/*.class']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../appFramework/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}