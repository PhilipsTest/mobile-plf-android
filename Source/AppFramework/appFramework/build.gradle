apply plugin: 'com.android.application'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'de.felixschulze.gradle.hockeyapp'

apply from: "../scripts/task_verification.gradle"
apply from: "../scripts/task_reporting.gradle"

jacoco {
    toolVersion = "0.7.1.201405082137"
}

buildscript {
    apply from: projectDir.absolutePath + '/../../../ci-build-support/gradle/versions.gradle'

    repositories {
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12"
        classpath(builddeps.cdpSCM)
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'de.felixschulze.gradle:gradle-hockeyapp-plugin:3.6'
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "referenceApp"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url 'https://maven.google.com'
        }
        maven {
            url 'https://maven.google.com'
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(versions.rap_referenceApp)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('apk')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
def zipSrc = file(buildDir.name + "/distributions/$project.name-$version-src" + '.tgz')
artifacts {
    archives zipDoc
    archives zipSrc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}

task tgzTask(type: Tar) {
    classifier = 'src'
    from projectDir
    include '**/*'
    exclude('build')
    extension = 'tgz'
    compression = Compression.GZIP
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$buildDir/outputs/mapping/AppFrameworkHamburger/release/mapping.txt")

            artifact("$buildDir/outputs/apk/${archivesBaseName}-release.apk")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

hockeyapp {
    apiToken = "b9d6e2f453894b4fbcb161b33a94f6c8"
    commitSha = objcdp.getCommitHashLong()
    buildServerUrl = objcdp.getArtifactoryUrl()
    releaseType = 2 // alpha
    notify = 2
    mappingFileNameRegex = "mapping.txt"
    mandatory = 1
    status = 2
    notesType = 1
    notes = new File(projectDir,"/../../../Documents/External/ReleaseNotes.md").getText('UTF-8')
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName version +  "(" + objcdp.getCommitHash() + ")"
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi 26
        // applicationId "net.gouline.jacoco"
        renderscriptSupportModeEnabled true
        testApplicationId "com.philips.platform.appframework.test"
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        multiDexEnabled true
    }

    apply from: "../scripts/proposition_specific.gradle"
    apply from: "../scripts/flavors.gradle"
    apply from: "../scripts/exclude_files.gradle"
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

    resolutionStrategy.force 'com.android.support:support-annotations:26.0.2'
    exclude group: 'commons-codec', module: 'commons-codec'
    exclude module: 'httpcore'

}

dependencies {
    compile('com.android.support:support-annotations:26.0.2') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile 'com.android.support:design:26.0.2'
    compile 'com.android.support:appcompat-v7:26.0.2'
    debugCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    leakCanaryCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    psraReleaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    debugCompile 'com.facebook.stetho:stetho:1.2.0'
    compile 'com.j256.ormlite:ormlite-core:5.0'
    compile 'com.j256.ormlite:ormlite-android:5.0'
    compile 'com.android.support:multidex:1.0.2'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

	def dp = project.ext.has('useprojectdependencies')

	def prgModule = module(group: 'com.philips.cdp', name: 'product-registration-lib', version: versions.prg_productRegistrationLib + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
	compile(dp ? project(':prg') : prgModule) {
		transitive = true
	}
	def dccModule = module(group: 'com.philips.cdp', name: 'digitalCare', version: versions.dcc_digitalCare + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
	compile(dp ? project(':dcc') : dccModule) {
		transitive = true
	}
	
	def iapModule = module(group: 'com.philips.cdp', name: 'iap', version: versions.iap_iap + objcdp.getVersionSuffix(), ext: 'aar', changing: true) 
	compile(dp ? project(':iap') : iapModule) {
		transitive = true
	}
	
	def dscModule = module(group: 'com.philips.cdp', name: 'dataServices', version: versions.dsc_dataServices + objcdp.getVersionSuffix(), ext: 'aar') 
	compile(dp ? project(':dsc') : dscModule) {
		exclude group: 'com.android.support'
		transitive = true
	}

    def myaModule = module(group: 'com.philips.cdp', name: 'MyAccount', version: versions.mya_myAccount + objcdp.getVersionSuffix(), ext: 'aar')
    compile(dp ? project(':mya') : myaModule) {
        exclude group: 'com.android.support'
        transitive = true
    }

	def commlibModule = module(group: 'com.philips.cdp', name: 'commlib', version: versions.cml_commlib + objcdp.getVersionSuffix(), ext: 'aar', changing: true)

	compile(dp ? project(':commlib') : commlibModule) {
		exclude group: 'com.android.support'
		transitive = true
	}

    def commlibUAppModule = module(group: 'com.philips.cdp', name: 'commlib-demouapp', version: versions.cml_commlib + objcdp.getVersionSuffix(), ext: 'aar', changing: true)
    compile(dp ? project(':commlibUApp') : commlibUAppModule) {
        exclude group: 'com.android.support'
        transitive = true
    }

	def dccUAppModule = module(group: 'com.philips.cdp', name: 'digitalCareUApp', version: versions.dcc_digitalCare + objcdp.getVersionSuffix(), ext: 'aar') 
	compile(dp ? project(':dccUApp') : dccUAppModule) {	
		exclude group: 'com.android.support'
		transitive = true
	}
	
	def ufwUAppModule = module(group: 'com.philips.cdp', name: 'uAppFwLibUApp', version: versions.uaf_uAppFwLib + objcdp.getVersionSuffix(), ext: 'aar') 
	compile(dp ? project(':ufwUApp') : ufwUAppModule) {	
		exclude group: 'com.android.support'
		transitive = true
	}
	
	def iapUAppModule = module(group: 'com.philips.cdp', name: 'iapUApp', version: versions.iap_iap + objcdp.getVersionSuffix(), ext: 'aar') 
	compile(dp ? project(':iapUApp') : iapUAppModule) {	
		exclude group: 'com.android.support'
		transitive = true
	}

	def dscUAppModule = module(group: 'com.philips.cdp', name: 'dataServicesUApp', version: versions.dsc_dataServices + objcdp.getVersionSuffix(), ext: 'aar')
	compile(dp ? project(':dscUApp') : dscUAppModule) {
		exclude group: 'com.android.support'
		transitive = true
	}
	
	def prgUAppModule = module(group: 'com.philips.cdp', name: 'product-registration-libUApp', version: versions.prg_productRegistrationLib + objcdp.getVersionSuffix(), ext: 'aar')
	compile(dp ? project(':prgUApp') : prgUAppModule) {		
		exclude group: 'com.android.support'
		transitive = true
	}
	
	def usrUAppModule = module(group: 'com.philips.cdp', name: 'UserRegistrationUApp', version: versions.usr_registrationApi + objcdp.getVersionSuffix(), ext: 'aar')
	compile(dp ? project(':usrUApp') : usrUAppModule) {	
		exclude group: 'com.android.support'
		exclude group: 'com.philips.cdp', module: 'RegistrationApi'
		transitive = true
	}
	
	def dprUAppModule = module(group: 'com.philips.cdp', name: 'devicepairingUApp', version: versions.dpr_devicePairing + objcdp.getVersionSuffix(), ext: 'aar') 
	compile(dp ? project(':dprUApp') : dprUAppModule) {	
		exclude group: 'com.android.support'
		transitive = true
	}

    def thsModule = module(group: 'com.philips.cdp', name: 'telehealth', version: versions.ths_telehealth+ objcdp.getVersionSuffix(), ext: 'aar')
	compile(dp ? project(':ths') : thsModule) {	
		transitive = true
	}


    def ewsModule = module(group: 'com.philips.cdp', name: 'ews-android', version: versions.ews_ews+ objcdp.getVersionSuffix(), ext: 'aar')
    compile(dp ? project(':ews') : ewsModule) {
        transitive = true
    }

    def shinelibUAppModule = module(group: 'com.philips.cdp', name: 'shinelibDemoUApp', version: versions.bll_shinelib+ objcdp.getVersionSuffix(), ext: 'aar')
        compile(dp ? project(':shinelibUApp') : shinelibUAppModule) {
            transitive = true
    }
    
    def themesettingsModule = module(group: 'com.philips.cdp', name: 'themesettings', version: '1.0.0', ext: 'aar')
        compile(dp ? project(':themesettings') : themesettingsModule) {
            transitive = true
    }
  
    compile ("com.crittercism:crittercism-android-agent:5.8.7")

    testCompile 'junit:junit:4.12'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testCompile 'org.robolectric:robolectric:3.4.2'
    testCompile 'org.robolectric:shadows-multidex:3.3.2'
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile "com.squareup.assertj:assertj-android:${androidAssertJVer}"

    testCompile 'org.powermock:powermock-core:1.6.6'
    testCompile "org.powermock:powermock-module-junit4:1.6.6"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.6"
    testCompile "org.powermock:powermock-module-junit4-rule-agent:1.6.6"
    testCompile "org.powermock:powermock-api-mockito:1.6.6"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.6"

    testCompile 'org.json:json:20170516'

    compile project(':pushnotification')

}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

tasks.withType(Test) {
    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize="2048m"
}

task('printArtifactoryApkPath') {
    doLast {
        if(new File('apkname.txt').exists()) {
            new File('apkname.txt').delete()
        }
        File apkname = new File('apkname.txt')
        apkname.append(objcdp.getArtifactoryContextUrl() + \
        "/" + objcdp.getArtifactoryPublishRepoKey() + \
        "/" + project.group.replace('.','/') + "/" + \
        archivesBaseName + "/" + version + \
        "/" + archivesBaseName + "-" + version + ".apk")
        println "Artifactory path of apk stored in apkname.txt"
    }
}
