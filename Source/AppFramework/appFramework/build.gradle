apply plugin: 'com.android.application'

archivesBaseName = "referenceApp"

buildscript {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '0.1.0', changing: true
    }
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)


allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-stage-local-android'
        }
    }
}

    
group = 'com.philips.cdp'
version = objcdp.getVersion()
	
artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
            publishArtifacts = true
        }
        defaults {
            publications ('apk')
            publishPom = true
            publishArtifacts = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local-android'
        }
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents"+ File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId project.archivesBaseName

            artifact zipDoc

            if(new File("$buildDir/outputs/apk/${project.archivesBaseName}-release.apk").exists()) {
                artifact("$buildDir/outputs/apk/${project.archivesBaseName}-release.apk")
            } else if(new File("$buildDir/outputs/apk/${project.archivesBaseName}-release-unsigned.apk").exists()) {
                artifact("$buildDir/outputs/apk/${project.archivesBaseName}-release-unsigned.apk")
            } else if(new File("$buildDir/outputs/apk/${project.archivesBaseName}-debug.apk").exists()) {
                artifact("$buildDir/outputs/apk/${project.archivesBaseName}-debug.apk")
            } else {
            }

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)

                    //If there are any exclusions in dependency
                    if (it.excludeRules.size() > 0) {
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        it.excludeRules.each { rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group)
                            exclusionNode.appendNode('artifactId', rule.module)
                        }
                    }
                }
            }
        }
    }
}

artifactoryPublish.dependsOn assembleDebug

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.philips.platform.appframework"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 5
        versionName objcdp.getVersionWithHash()
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        generatedDensities = []
        multiDexEnabled true

    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    dexOptions {
        incremental = true;
        preDexLibraries = false
        javaMaxHeapSize "4g" // 2g should be also OK
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            shrinkResources true
            debuggable true
            testCoverageEnabled true
            proguardFile 'proguard-rules.pro'
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    def propFile = new File('signing.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'

        pickFirst 'lib/mips/librsjni.so'
        pickFirst 'lib/mips/libblasV8.so'
        pickFirst 'lib/mips/libRSSupport.so'
        pickFirst 'lib/x86/librsjni.so'
        pickFirst 'lib/x86/libblasV8.so'
        pickFirst 'lib/x86/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/librsjni.so'
        pickFirst 'lib/armeabi-v7a/libblasV8.so'
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/librsjni.so'
        exclude 'META-INF/INDEX.LIST'
    }
}

dependencies {

    testCompile('org.mockito:mockito-core:1.10.19')
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:support-annotations:23.2.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:appcompat-v7:+'


    compile(group: 'com.philips.cdp', name: 'registrationApi', version: '7.1.0-rc.5', ext: 'aar') {
        exclude group: 'com.android.support'
        transitive = true
    }

    compile(group: 'com.philips.cdp', name: 'uikitLib', version: '3.2.3', ext: 'aar') {
        transitive = true
    }
    compile(group: 'com.philips.cdp', name: 'product-registration-lib', version: '1.2.0-rc.3', ext: 'aar') {
        exclude group: 'com.android.support'
        transitive = true
    }

    compile(group: 'com.philips.cdp', name: 'digitalCare', version: '7.0.0-rc.1', ext: 'aar'){
        exclude group: 'com.android.support'
        transitive=true
    }

    compile(group: 'com.philips.cdp', name: 'iap', version: '4.2.0-rc.2', ext: 'aar'){
        exclude group: 'com.android.support'
        transitive=true
    }
    compile(group: 'com.philips.cdp', name: 'AppInfra', version: '1.2.0-rc.5', ext: 'aar')

    compile(group: 'com.philips.cdp.shine', name: 'shinelib', version: '+', ext: 'aar')
    compile(group: 'com.philips.cdp.shine', name: 'shineplugincopper', version: '+', ext: 'aar')

    testCompile 'junit:junit:4.12'
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

apply from: "resolution.gradle"
