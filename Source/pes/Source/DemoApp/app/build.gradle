/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        //classpath builddeps.cdpSCM
    }
}

archivesBaseName = 'pesApp'

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools


    defaultConfig {
        applicationId "com.philips.cdp.di.pesdemo"
        multiDexEnabled true
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            proguardFile 'proguard-rules.pro'
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    println "  projectDir:   " + project.projectDir;
    def propFile = new File("${project.projectDir}/signing.properties")
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            println 'signing.properties found and fully filled in'
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'iap NOPE - signing.properties NOT found'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'iap signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */
    flavorDimensions "default"

    productFlavors {
        simulator {
            applicationId 'com.philips.cdp.di.pesdemo'
            versionCode 2
            versionName "0.17.8"
        }
        device {
            applicationId 'com.philips.cdp.di.pesdemo'
            versionCode 2
            versionName "0.17.8"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'InvalidPackage'
        disable 'GradleCompatible'
        disable 'MissingTranslation'
        disable 'TypographyFractions', 'TypographyQuotes'
        absolutePaths false
        lintConfig file('lint.xml')
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    debugImplementation deps.leakcanary
    releaseImplementation deps.leakcanary_no_op
    testImplementation deps.leakcanary_no_op

    implementation project(strings.iapuapp.projectName)

    implementation deps.constraintlayout
    implementation deps.support.design
    implementation deps.support.supportv4
    implementation deps.support.annotations
    implementation deps.support.appcompatv7
    implementation philipsdeps.uid
    if (useprojectdependencies) {
        implementation project(strings.usr.projectName)
        implementation project(strings.iap.projectName)
        implementation project(strings.prx.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.ail.projectName)
    } else {
        implementation(philipsdeps.registrationApi) {
            exclude group: 'com.android.support', module: 'support-design'
            exclude group: 'com.android.support', module: 'support-supportv4'
            exclude group: 'com.android.support', module: 'support-appcompatv7'
            exclude group: 'com.android.support', module: 'support-annotations'
        }
        implementation philipsdeps.prx
        implementation philipsdeps.iap
    }

    androidTestImplementation deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation deps.espresso_contrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}

tasks.withType(Test) {
    ignoreFailures = true
}


