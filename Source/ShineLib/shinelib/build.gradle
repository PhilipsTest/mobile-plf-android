/*
 * Copyright (c) Koninklijke Philips N.V., 2016, 2017
 * All rights reserved.
 */
import com.philips.cdp.cdpSCM

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'cdpSCM'

apply from: rootDir.absolutePath + '/../common/gradle/module-tasks.gradle'

buildscript {
    repositories {
        maven { url repos.jcenter }
        maven { url repos.release }
    }

    dependencies {
        classpath(builddeps.androidmavengradleplugin)
        classpath(builddeps.buildinfoextractor)
        classpath(builddeps.cdpscm)
    }
}

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
version = objcdp.getVersion()

artifactory {
    contextUrl = repos.base
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
        }
        defaults {
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local-android'
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target

        versionCode 3
        versionName version

        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        debug {
            buildConfigField "String", "LIBRARY_VERSION", "\"${objcdp.getVersionWithHash()}\""
        }
        release {
            minifyEnabled false
            buildConfigField "String", "LIBRARY_VERSION", "\"${objcdp.getVersion()}\""
        }
    }
}

dependencies {
    compile deps.support_annotations
    compile deps.gson

    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompile 'com.nitorcreations:junit-runners:1.3'

    testCompile("org.robolectric:robolectric:3.1.4") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile("org.robolectric:shadows-support-v4:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

def javaDocClassesForPublicApi = ['SHNCentral',
                                  'SHNBluetoothHardwareUnavailableException',
                                  'SHNDeviceDefinitionInfo', // for plugin registration via SHNCentral
                                  'SharedPreferencesProvider',
                                  'SHNDeviceScanner',
                                  'SHNDeviceAssociation',
                                  'SHNAssociationProcedure',
                                  'SHNUserConfiguration',
                                  'SHNDevice',
                                  'SHNCapability',
                                  'SHNCapabilityType', 'SHNCapabilityBattery', 'SHNCapabilityDeviceInformation', 'SHNCapabilityLogSynchronization', 'SHNCapabilityFirmwareUpdate', 'SHNFirmwareInfoResultListener', 'SHNFirmwareInfo', 'SHNCapabilityDataStreaming', 'SHNCapabilityDeviceDiagnostics', 'SHNCapabilityUserConfiguration',
                                  'SHNData',
                                  'SHNDataType', 'SHNDataBloodPressure', 'SHNDataHeartRate', 'SHNDataWeight', 'SHNDataBodyTemperature', 'SHNTemperatureType',
                                  'SHNResult', 'SHNResultListener', 'SHNIntegerResultListener', 'SHNStringResultListener', 'SHNSetResultListener', 'SHNMapResultListener', 'SHNObjectResultListener']

def javaDocClassesForPluginApi = javaDocClassesForPublicApi + [
        'SHNAssociationProcedurePlugin',
        'SHNDeviceScannerInternal',
        'SHNInternalScanRequest',
        'SHNDeviceFoundInfo',
        'BleScanRecord',
        'PersistentStorage',
        'PersistentStorageFactory',
        'PersistentStorageCleaner',
        'Timer',

        // existing building blocks
        'SHNDeviceImpl',
        'SHNAssociationProcedureNearestDevice',
        'SHNCapabilityLogSyncHealthThermometer', 'SHNServiceHealthThermometer', 'SHNTemperatureMeasurement', 'SHNTemperatureMeasurementInterval', 'SHNTemperatureMeasurementResultListener',
        'SHNCapabilityLogSyncWeightScale', 'SHNServiceWeightScale', 'SHNWeightMeasurement', 'SHNWeightScaleFeatures', 'SHNServiceBodyComposition', 'SHNBodyCompositionMeasurement', 'SHNBodyCompositionFeatures',

        'SHNCapabilityDeviceInformationImpl', 'SHNCapabilityDeviceInformationCached', 'SHNServiceDeviceInformation',
        'SHNCapabilityBatteryImpl', 'SHNServiceBattery',
        'CapabilityFirmwareUpdateDiComm', 'DiCommFirmwarePort',
        'SHNDeviceTimeAdjusterCurrentTimeService', 'SHNServiceCurrentTime'
]

task generateJavadocPublicApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../../../Documents/External/BluelibApi/")
    for (file in javaDocClassesForPublicApi) {
        include("**/" + file + ".java")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/");
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
    }

    failOnError false
}

task generateJavadocPluginApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../../../Documents/External/BluelibPluginApi/")
    for (file in javaDocClassesForPluginApi) {
        include("**/" + file + ".java")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/");
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
    }

    failOnError false
}

task generateJavadoc()

generateJavadoc.dependsOn {
    tasks.findAll { task -> task.name.startsWith('generateJavadoc') && task.name != "generateJavadoc" }
}

jacoco {
    toolVersion = '0.7.6.201602180812'
}

def coverageSourceDirs = ['src/main/java']

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/inject/*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }

    reports {
        xml.enabled = false
        html.enabled = true
    }
}