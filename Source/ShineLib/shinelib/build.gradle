/*
 * Copyright (c) Koninklijke Philips N.V., 2015.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

apply from: '../extra/artifactory.gradle'

android {
    compileSdkVersion _compileSdkVersion
    buildToolsVersion _buildToolsVersion

    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName getLibVersionName(shineLibVersion)
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-annotations:23.1.1'

    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock-module-junit4:1.6.3'
    testCompile 'org.powermock:powermock-api-mockito:1.6.3'
    testCompile 'com.nitorcreations:junit-runners:1.2'

    testCompile("org.robolectric:robolectric:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile("org.robolectric:shadows-support-v4:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

def getLibVersionName(shineLibVersion) {
    def gitHash = """git rev-parse --short HEAD""".execute().text.trim()
    def workingBranch = """git rev-parse --abbrev-ref HEAD""".execute().text.trim()

    if (!workingBranch.equals('master')) {
        return "${shineLibVersion} (${gitHash} ${workingBranch})"
    }

    return "${shineLibVersion}"
}
