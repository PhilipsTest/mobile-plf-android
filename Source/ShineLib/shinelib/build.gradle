/*
 * Copyright (c) Koninklijke Philips N.V., 2016
 * All rights reserved.
 */
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'cdpSCM'

import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)

group = 'com.philips.cdp'
version = objcdp.getVersion()

android {
    compileSdkVersion _compileSdkVersion
    buildToolsVersion _buildToolsVersion

    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName version

        consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    buildTypes {
        debug{
            buildConfigField "String", "LIBRARY_VERSION" , "\"${objcdp.getVersionWithHash()}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "LIBRARY_VERSION" , "\"${objcdp.getVersion()}\""
        }
    }
}

dependencies {

    provided 'com.android.support:support-annotations:23.1.1'

    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompile 'com.nitorcreations:junit-runners:1.3'

    testCompile("org.robolectric:robolectric:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testCompile("org.robolectric:shadows-support-v4:3.0") {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release-local-android'
        }
    }
}

def javaDocClassesForPublicApi = ['SHNCentral',
                                  'SHNBluetoothHardwareUnavailableException',
                                  'SHNDeviceDefinitionInfo', // for plugin registration via SHNCentral
                                  'SharedPreferencesProvider',
                                  'SHNDeviceScanner',
                                  'SHNDeviceAssociation',
                                  'SHNAssociationProcedure',
                                  'SHNUserConfiguration',
                                  'SHNDevice',
                                  'SHNCapability',
                                  'SHNCapabilityType', 'SHNCapabilityBattery', 'SHNCapabilityDeviceInformation', 'SHNCapabilityLogSynchronization', 'SHNCapabilityFirmwareUpdate', 'SHNFirmwareInfoResultListener', 'SHNFirmwareInfo', 'SHNCapabilityDataStreaming', 'SHNCapabilityDeviceDiagnostics', 'SHNCapabilityUserConfiguration',
                                  'SHNData',
                                  'SHNDataType', 'SHNDataBloodPressure', 'SHNDataHeartRate', 'SHNDataWeight', 'SHNDataBodyTemperature', 'SHNTemperatureType',
                                  'SHNResult', 'SHNResultListener', 'SHNIntegerResultListener', 'SHNStringResultListener', 'SHNSetResultListener', 'SHNMapResultListener', 'SHNObjectResultListener']

def javaDocClassesForPluginApi = javaDocClassesForPublicApi + [
        'SHNAssociationProcedurePlugin',
        'SHNDeviceScannerInternal',
        'SHNInternalScanRequest',
        'SHNDeviceFoundInfo',
        'BleScanRecord',
        'PersistentStorage',
        'PersistentStorageFactory',
        'PersistentStorageCleaner',
        'Timer',

        // existing building blocks
        'SHNDeviceImpl',
        'SHNAssociationProcedureNearestDevice',
        'SHNCapabilityLogSyncHealthThermometer', 'SHNServiceHealthThermometer', 'SHNTemperatureMeasurement', 'SHNTemperatureMeasurementInterval', 'SHNTemperatureMeasurementResultListener',
        'SHNCapabilityLogSyncWeightScale', 'SHNServiceWeightScale', 'SHNWeightMeasurement', 'SHNWeightScaleFeatures', 'SHNServiceBodyComposition', 'SHNBodyCompositionMeasurement', 'SHNBodyCompositionFeatures',

        'SHNCapabilityDeviceInformationImpl', 'SHNCapabilityDeviceInformationCached', 'SHNServiceDeviceInformation',
        'SHNCapabilityBatteryImpl', 'SHNServiceBattery',
        'CapabilityFirmwareUpdateDiComm', 'DiCommFirmwarePort',
        'SHNDeviceTimeAdjusterCurrentTimeService', 'SHNServiceCurrentTime'
]

task generateJavadocPublicApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../../../Documents/External/BluelibApi/")
    for (file in javaDocClassesForPublicApi) {
        include("**/" + file + ".java")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/");
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
    }

    failOnError false
}

task generateJavadocPluginApi(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../../../Documents/External/BluelibPluginApi/")
    for (file in javaDocClassesForPluginApi) {
        include("**/" + file + ".java")
    }

    options {
        memberLevel = JavadocMemberLevel.PUBLIC
        links("http://docs.oracle.com/javase/7/docs/api/");
        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
    }

    failOnError false
}

task generateJavadoc()

generateJavadoc.dependsOn {
    tasks.findAll { task -> task.name.startsWith('generateJavadoc') && task.name != "generateJavadoc" }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
    archives sourceJar
}

task zipDocuments(type: Zip) {
    def docFiles = objcdp.getExternalDocPath()
    from files(docFiles) {
        baseName = project.name
        classifier 'docs'
    }
}

zipDocuments {}.dependsOn generateJavadoc
//=======To zip and upload "Documents/External" ==ENDS=============