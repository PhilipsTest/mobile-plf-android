apply plugin: 'com.android.application'
buildscript {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.0-beta1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.2'
        classpath group: 'com.philips.cdp', name: 'cdpSCM', version: '0.1.0', changing: true
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

apply plugin: 'com.jfrog.artifactory-upload'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)


allprojects {
    repositories {
        maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/jcenter' }
        maven {
            url "http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android"
            credentials {
                username = "readonly"
                password = "readonly"
            }
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/ext-release-local'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-release-local-android'
        }
        maven {
            url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-stage-local-android'
        }
		maven { url 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory/libs-snapshot-local-android' } 
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}


group = 'com.philips.cdp'
version = objcdp.getVersion()

artifactory {
    contextUrl = 'http://maartens-mini.ddns.htc.nl.philips.com:8081/artifactory'
    publish {
        repository {
            repoKey = objcdp.getArtifactoryRepoKey('android')
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            publishPom = true
            publishIvy = false
            publishBuildInfo = true
			publishArtifacts = true

        }
    }
    resolve {
        repository {
            repoKey = 'app-release-local'
        }
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
def zipSrc = file(buildDir.name + "/distributions/$project.name-$version-src" + '.tgz' )
artifacts {
    archives zipDoc
    archives zipSrc
}

task zipDocuments(type: Zip) {
    def docpath = """git rev-parse --show-toplevel""".execute().text.trim()
    def docfiles = docpath + File.separator + "Documents"+ File.separator + "External"
    from files(docfiles) {
        baseName = project.name
        classifier 'docs'
    }
}

task tgzTask(type: Tar) {
    classifier = 'src'
    from projectDir
    include '**/*'
    exclude ('build')
    extension = 'tgz'
    compression = Compression.GZIP
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        applicationId "cdp.philips.com.mydemoapp"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 5
        versionName "0.1.0-rc.11"
vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        generatedDensities = []
        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    dexOptions {
        incremental = true;
        preDexLibraries = false
        javaMaxHeapSize "4g" // 2g should be also OK
    }
    buildTypes {
       // release {
         //   minifyEnabled true
           // shrinkResources true
           // proguardFile 'proguard-rules.pro'
            //signingConfig signingConfigs.release
        //}

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true
            testCoverageEnabled false
            proguardFile 'proguard-rules.pro'
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    def propFile = new File('signing.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'

        pickFirst 'lib/mips/librsjni.so'
        pickFirst 'lib/mips/libblasV8.so'
        pickFirst 'lib/mips/libRSSupport.so'
        pickFirst 'lib/x86/librsjni.so'
        pickFirst 'lib/x86/libblasV8.so'
        pickFirst 'lib/x86/libRSSupport.so'
        pickFirst 'lib/armeabi-v7a/librsjni.so'
        pickFirst 'lib/armeabi-v7a/libblasV8.so'
        pickFirst 'lib/armeabi-v7a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/libRSSupport.so'
        pickFirst 'lib/arm64-v8a/librsjni.so'
        exclude 'META-INF/INDEX.LIST'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

    testCompile('org.mockito:mockito-core:1.10.19')
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:support-annotations:23.2.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:appcompat-v7:+'

    // Module projects
    compile project(':dataServices')
    // DAGGER
    compile "com.google.dagger:dagger:${daggerVer}"
    apt "com.google.dagger:dagger-compiler:${daggerVer}"
    provided 'org.glassfish:javax.annotation:10.0-b28'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'javax.inject:javax.inject:1'
    testApt "com.google.dagger:dagger-compiler:${daggerVer}"
    // DEBUG
    debugCompile 'com.facebook.stetho:stetho:1.2.0'

    compile "com.j256.ormlite:ormlite-core:${ormliteVer}"
    compile "com.j256.ormlite:ormlite-android:${ormliteVer}"
    compile "com.philips.cdp:registrationApi:7.1.0-SNAPSHOT"
    compile "com.philips.cdp:uikitLib:${uikitVersion}"
    compile "com.philips.cdp:AppInfra:1.2.0-SNAPSHOT"
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

