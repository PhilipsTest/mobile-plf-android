apply plugin: 'com.terrafolio.jenkins'

jenkins {

    def branch_name = getWorkingBranch()
    def branch_type = getBranchType(branch_name)
    def escaped_branch_name = branch_name.replace('/', '-')
    def display_name = 'Android ShineLib ' + escaped_branch_name.replace('feature-', '').replace('-', ' ').replace('_', ' ').capitalize()
    def flavour = ""
    def xmlConfigType = branch_type

    def arguments = getArguments()

    for (item in arguments) {
        if (item.startsWith('flavour:')) {
            flavour = item.split(':')[1]
            xmlConfigType = flavour
            display_name = display_name + " " + flavour.capitalize()
        }
    }

    servers {
        philips {
            url 'http://mobteam-build.ddns.htc.nl.philips.com:8080/'
            secure true
            username '310026030'
            password 'SwatSwat15!'
        }
    }

    defaultServer servers.philips

    templates {
        build {
            xml file("extra/jenkins/${xmlConfigType}-config.xml")
        }
    }

    jobs {
        "build_${branch_name}${flavour}" {
            server servers.philips
            definition {
                name "Android-ShineLib-${escaped_branch_name}${flavour}"
                xml templates.build.override { projectXml ->
                    projectXml.description = "Android ${branch_type}${flavour} build from ${display_name} sources"
                    projectXml.displayName = display_name
                    projectXml.disabled = 'false'
                    projectXml.scm.branches.replaceNode { node ->
                        branches() {
                            'hudson.plugins.git.BranchSpec'() {
                                name([:], "*/${branch_name}")
                            }
                        }
                    }
                }
            }
        }
    }
}

def getArguments() {
    def arguments = []
    if (project.hasProperty('args')) {
        arguments = args.split(',')
    }

    return arguments
}

def getWorkingBranch() {
    // Triple double-quotes for the breaklines
    def workingBranch = """git rev-parse --abbrev-ref HEAD""".execute().text.trim()

    print "Working branch:  ${workingBranch}\n"

    return workingBranch
}

def getBranchType(branch_name){
    def branch_type = 'develop';

    if (branch_name.equals('master')) {
        branch_type = 'master';
    } else if (branch_name.startsWith('release')) {
        branch_type = 'release';
//    } else if (branch_name.startsWith('hotfix')) {
//        branch_type = 'release';
//    } else if (branch_name.startsWith('feature')) {
//        branch_type = 'feature';
    }

    return branch_type
}