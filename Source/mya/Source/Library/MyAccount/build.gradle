apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'
apply plugin: 'findbugs'
apply plugin: 'pmd'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'

archivesBaseName = "MyAccount"
version = objcdp.getVersion(versions.mya_myAccount)


android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    testOptions {
        unitTests.returnDefaultValues = true
    }

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        multiDexEnabled true
        testApplicationId "com.philips.platform.mya.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules-mya.pro'
        generatedDensities = []
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]

    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    //3rd party
    compile(project(':ConsentWidgets'))
    compile(project(':ConsentHandlerInterface'))
    compile(project(':ConsentAccessToolKit'))
    //Coco
    def dp = project.ext.has('useprojectdependencies')
    if (dp) {
        compile(project(':uikitLib'))
    }

    if (dp) {
        compile(project(':uid'))
    } else {
        compile(group: 'com.philips.cdp', name: 'uid', version: versions.uid_uid + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            transitive = true
        }
    }

    if (dp) {
        compile(project(':registrationApi'))
    } else {
        compile(group: 'com.philips.cdp', name: 'registrationApi', version: versions.usr_registrationApi + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            transitive = true
            exclude group: 'com.android.support', module: 'customtabs'
        }
    }

    // Tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile('org.robolectric:robolectric:3.4.2') {
        exclude module: 'commons-logging'
        exclude module: 'support-v4'
    }
    testCompile "org.robolectric:shadows-support-v4:3.3.2"
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
}