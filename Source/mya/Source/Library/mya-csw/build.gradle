/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'pl.droidsonroids.pitest'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = "mya-csw"

buildscript {
    repositories{
        google()
        maven { url sonatype }
    }
    dependencies {
        classpath deps.butterknife_gradle
    }
}
android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        multiDexEnabled true
        generatedDensities = []
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
            consumerProguardFiles 'consumer-proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        abortOnError false
    }


}

dependencies {
    //3rd party
    implementation deps.gson
    annotationProcessor deps.butterknife
    implementation deps.dagger.dagger
    implementation deps.dagger.androidsupport
    annotationProcessor deps.dagger.androidprocessor
    annotationProcessor deps.dagger.compiler
    implementation deps.butterknife
    implementation deps.calligraphy
    implementation deps.support.recyclerview
    implementation deps.support.appcompatv7
    implementation deps.support.supportv4



    // Philips Components
    def dp = project.ext.has('useprojectdependencies')
    if (dp) {
        implementation project(':uid')
        implementation project(':registrationApi')
        implementation project(':pif')
        implementation project(':uikitLib')
        implementation project(':mya-catk')
        implementation project(':uAppFwLib')
        implementation project(':AppInfra')
    } else {
        implementation philipsdeps.uid
        implementation (philipsdeps.registrationApi) {
            exclude group: 'com.android.support', module: 'customtabs'
            exclude group: 'com.google.dagger'
        }
        implementation philipsdeps.pif
        implementation philipsdeps.uikitLib
        implementation philipsdeps.mya-catk
    }

    // Tests
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_junit
    testImplementation deps.assertj
    testImplementation(deps.robolectric) {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    testImplementation deps.robolectric_shadows
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_junit_rule_agent
    testImplementation deps.powermock_classloading_xstream
    testImplementation deps.adobemobilelib
}

task updateResources(type: Exec) {

    workingDir "$rootDir"
    commandLine './ConsentWidgets/generateLocalization.sh'
    ignoreExitValue true
    doLast {
        println "$execResult"
        if (execResult.exitValue == 0) {
            throw new GradleException('error occurred while generating Localization files from Excel')
        }
    }
}

pitest {
    targetClasses = ['com.philips.platform.mya.csw.*']  //by default "${project.group}.*"
    pitestVersion = '1.1.0' //not needed when a default PIT version should be used
    threads = 1
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    excludedClasses = [
            '**Factory*', // Generated by Dagger
            '**_MembersInjector*', // Generated by Dagger
            '**_ViewBinding*', // Generated by Dagger
            'com.philips.platform.mya.csw.dialogs.ConfirmDialogViewTest', // Causes error but no tests fail (false positive)
            'com.philips.platform.mya.csw.dialogs.DialogViewTest', // Causes error but no tests fail (false positive)
            'com.philips.platform.mya.csw.dialogs.ProgressDialogViewTest', // Causes error but no tests fail (false positive)
            'com.philips.platform.mya.csw.injection.DaggerCswComponent', // Created by Dagger
            'com.philips.platform.mya.csw.injection.DaggerCswComponent$Builder' // Created by Dagger
    ]
}