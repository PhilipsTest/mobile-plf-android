/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/androidtest.gradle'
buildscript {
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath builddeps.cdpSCM
    }
}

archivesBaseName = "mya"
group = 'com.philips.cdp'

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools


    testOptions {
        unitTests {
            returnDefaultValues = true
        }
        unitTests.all {
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        multiDexEnabled true
        testApplicationId "com.philips.platform.mya.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules-mya.pro'
        generatedDensities = []
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled = true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }
}

configurations {
    compile.exclude module: 'support-annotations'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

dependencies {
    //3rd party
    implementation deps.gson
    implementation deps.support.appcompatv7
    implementation deps.support.supportv4
    implementation deps.support.recyclerview
    implementation deps.support.design
    implementation deps.calligraphy

    // Philips components
    if (directdependencies) {
        implementation project(':uikitLib')
        implementation project(':uid')
        implementation project(':uAppFwLib')
        implementation project(':AppInfra')
        implementation project(':registrationApi')
        implementation project(':csw')
        implementation project(':catk')
        implementation project(':pif')

    } else {
        implementation philipsdeps.uikitLib
        implementation philipsdeps.uid
        implementation philipsdeps.uAppFwLib
        implementation philipsdeps.AppInfra
        implementation(philipsdeps.registrationApi) {
            exclude group: 'com.android.support', module: 'customtabs'
        }
        implementation philipsdeps.csw
        implementation philipsdeps.catk
        implementation philipsdeps.pif
    }

    // Tests
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.robolectric
    testImplementation deps.robolectric_shadows
    testImplementation deps.opengl
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {
    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }

}

tasks.withType(Test) {
    ignoreFailures = true
}