/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco-android'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

//apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'


buildscript {
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
        classpath(builddeps.cdpSCM)
    }
}

archivesBaseName = "mya"
group = 'com.philips.cdp'
version = objcdp.getVersion(platformversion)

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    jacocoAndroidUnitTestReport {
        csv.enabled false
        html.enabled true
        xml.enabled false
    }

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        multiDexEnabled true
        testApplicationId "com.philips.platform.mya.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        consumerProguardFiles 'proguard-rules-mya.pro'
        generatedDensities = []
        // replace the below string with your own Google client ID. Make sure this is consistent
        // with the values used in openid_appauth_idp_configs.xml
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]

    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'lib/arm64-v8a/librsjni.so'
        exclude 'lib/arm64-v8a/libRSSupport.so'
        exclude 'lib/armeabi-v7a/libblasV8.so'
        exclude 'lib/armeabi-v7a/librsjni.so'
        exclude 'lib/armeabi-v7a/libRSSupport.so'
        exclude 'lib/mips/libblasV8.so'
        exclude 'lib/mips/librsjni.so'
        exclude 'lib/mips/libRSSupport.so'
        exclude 'lib/x86/libblasV8.so'
        exclude 'lib/x86/librsjni.so'
        exclude 'lib/x86/libRSSupport.so'
    }

    lintOptions {
        abortOnError false
    }

    publishNonDefault true
}

configurations {
    compile.exclude module: 'support-annotations'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    //3rd party
    compile deps.gson

    //Coco
    def dp = project.ext.has('useprojectdependencies')

    if (dp) {
        debugCompile project(path: ':uikitLib', configuration: 'debug')
        releaseCompile project(path: ':uikitLib', configuration: 'release')
        debugCompile project(path: ':uid', configuration: 'debug')
        releaseCompile project(path: ':uid', configuration: 'release')
        debugCompile project(path: ':registrationApi', configuration: 'debug')
        releaseCompile project(path: ':registrationApi', configuration: 'release')
        debugCompile project(path: ':mya-csw', configuration: 'debug')
        releaseCompile project(path: ':mya-csw', configuration: 'release')
        debugCompile project(path: ':pif', configuration: 'debug')
        releaseCompile project(path: ':pif', configuration: 'release')

    } else {
        compile(group: 'com.philips.cdp', name: 'uikitLib', version: platformversiongit + objcdp.getVersionSuffix(), changing: true)
        compile(group: 'com.philips.cdp', name: 'uid', version: platformversion + objcdp.getVersionSuffix(), changing: true)
        compile(group: 'com.philips.cdp', name: 'registrationApi', version: platformversion + objcdp.getVersionSuffix(), changing: true) {
            exclude group: 'com.android.support', module: 'customtabs'
        }
        compile(group: 'com.philips.cdp', name: 'mya-csw', version: platformversion + objcdp.getVersionSuffix(), changing: true)
        compile(group: 'com.philips.cdp', name: 'pif', version: platformversion + objcdp.getVersionSuffix(), changing: true)
        compile(group: 'com.philips.cdp', name: 'mya-catk', version: platformversion + objcdp.getVersionSuffix(), changing: true)
    }

    // Tests
    testCompile('org.robolectric:robolectric:3.4.2') {
        exclude module: 'commons-logging'
        exclude module: 'support-v4'
    }
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {
    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }

}

tasks.withType(Test) {
    ignoreFailures = true
}