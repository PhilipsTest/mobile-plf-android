/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

archivesBaseName = strings.prg.artifactName

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        //classpath builddeps.cdpSCM
        classpath builddeps.jruby_gradle
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        versionCode 1
        //versionName version + "(" + objcdp.getCommitHash() + ")"
        testApplicationId "com.philips.cdp.test"
        multiDexEnabled true
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules-prg.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.calligraphy
    implementation deps.gson
    implementation deps.libphonenumber
    implementation deps.support.appcompatv7
    implementation deps.volley

    if (useprojectdependencies) {
        implementation project(strings.usr.projectName)
        implementation project(strings.prx.projectName)
        
        implementation project(strings.ufw.projectName)
        implementation project(strings.ail.projectName)
    } else {
        implementation philipsdeps.registrationApi
        implementation philipsdeps.prx
        implementation(philipsdeps.uid) {
            exclude group: 'com.android.support'
        }
    }

    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.robolectric

    testImplementation project(strings.jmp.projectName)
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/debug')
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("findbugs-exclude.xml")
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {
    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

tasks.withType(Test) {
    ignoreFailures = true
    maxHeapSize = '4g'
    scanForTestClasses = false
    include "**/*Test.class"
    test {
        // set JVM arguments for the test JVM(s)
        jvmArgs '-noverify'
    }
}
