apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'

archivesBaseName = "product-registration-libUApp"

def coverageSourceDirs = [
        '../product-registration-lib/src/main/java'
]

buildscript {
    apply from: projectDir.absolutePath + '/../../../../build-support/gradle/versions.gradle'

    repositories {
        maven { url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }
    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
        classpath builddeps.jruby_gradle
    }
}


//apply from: 'localization.gradle'

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}
//=======To zip and upload "Documents/External" ==ENDS=============

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools
    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version
        multiDexEnabled true  // this line will solve this problem

        testInstrumentationRunner deps.androidJUnitRunner
        manifestPlaceholders = [
                'appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp'
        ]}
    dataBinding.enabled = true
    android {
        lintOptions {
            abortOnError false
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.calligraphy
    implementation deps.support.design


    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        implementation project(':uid')
        implementation project(':product-registration-lib')
        implementation project(':registrationApi')
        implementation project(':prx')
        implementation project(':uAppFwLib')
        implementation project(':AppInfra')
    } else {
        implementation (philipsdeps.uid) {
            exclude group: 'com.android.support'
        }
        implementation philipsdeps.product_registration_lib
    }

    implementation(deps.support.recyclerview) {
        exclude module: "com.android.support"
    }
    implementation(deps.support.cardview) {
        exclude module: "com.android.support"
    }
    implementation(deps.support.appcompatv7) {
        exclude module: "com.android.support"
    }

    implementation deps.support.cardview

    implementation(deps.butterknife) {
        exclude module: "com.android.support"
    }
    implementation deps.greenrobot


    testImplementation(deps.junit) {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }

    androidTestImplementation(deps.espresso_core) {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }
    androidTestImplementation(deps.android_testrunner) {
        exclude module: "com.android.support"
        exclude module: "support-annotations"
    }

    androidTestImplementation deps.android_test_commons
}
tasks.withType(Test) {
    ignoreFailures = true
}