apply plugin: 'com.android.library'

apply from: "../scripts/versions.gradle"
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/cdpscm.gradle'
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/lib.gradle'
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

version = objcdp.getVersion(versions.mya_consentAccessToolKit)
android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles "proguard-rules.pro"
        }
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {

    compile deps.support.appcompatv7

    compile deps.support.recyclerview

    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        compile project(':uid')
    } else {
        compile(group: 'com.philips.cdp', name: 'uid', version: versions.uid_uid + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    testCompile deps.junit
    testCompile deps.robolectric
    testCompile deps.robolectric_shadows

}
