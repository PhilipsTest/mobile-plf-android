apply plugin: 'com.android.application'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'de.felixschulze.gradle.hockeyapp'

apply from: "../scripts/task_verification.gradle"
apply from: "../scripts/task_reporting_logging.gradle"
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/tasks.gradle'
apply plugin: 'com.jakewharton.butterknife'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        google()
    }

    dependencies {
        classpath builddeps.trickyandroid
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
        classpath builddeps.bintrayplugin
        classpath builddeps.hockeyapp
        classpath deps.butterknife_gradle
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "referenceApp"

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('apk')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
def zipSrc = file(buildDir.name + "/distributions/$project.name-$version-src" + '.tgz')
artifacts {
    archives zipDoc
    archives zipSrc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}

task tgzTask(type: Tar) {
    classifier = 'src'
    from projectDir
    include '**/*'
    exclude('build')
    extension = 'tgz'
    compression = Compression.GZIP
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/mapping/release/mapping.txt") {
                classifier = 'mapping'
            }

            artifact("$buildDir/outputs/apk/release/${archivesBaseName}-release.apk")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.implementation.allDependencies
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }

        }
    }
}

hockeyapp {
    apiToken = "b9d6e2f453894b4fbcb161b33a94f6c8"
    commitSha = objcdp.getCommitHashLong()
    buildServerUrl = objcdp.getArtifactoryUrl()
    releaseType = 2 // alpha
    notify = 2
    mappingFileNameRegex = "mapping.txt"
    mandatory = 1
    status = 2
    notesType = 1
    notes = new File(projectDir, "/../../../Documents/External/ReleaseNotes.md").getText('UTF-8')
}

def buildType 

android {

    compileOptions {
        sourceCompatibility versions.sourceCompatibility
        targetCompatibility versions.targetCompatibility
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
	applicationVariants.all { variant ->
        buildType = variant.buildType.name // sets the current build type
		println "*****BuildType****"+ buildType
    }
	
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    apply from: "../scripts/proposition_specific.gradle"
    apply from: "../scripts/flavors.gradle"
    apply from: "../scripts/exclude_files.gradle"

    applicationVariants.all { variant ->
        def productFlavor = variant.productFlavors[0] != null ? "${variant.productFlavors[0].name.capitalize()}" : ""
        def buildtype = "${variant.buildType.name.capitalize()}"
        tasks["compile${productFlavor}${buildtype}UnitTestSources"].dependsOn(tasks["merge${productFlavor}${buildtype}Assets"])
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

    exclude group: 'commons-codec', module: 'commons-codec'
    exclude module: 'httpcore'
}

dependencies {
    implementation(deps.support.annotations) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation deps.support.design
    implementation deps.support.supportv4
    implementation deps.gson
    implementation deps.wechat
    implementation deps.shamanland_fonticon
    implementation deps.joda_time
    implementation deps.volley
    implementation deps.javax_inject
    implementation deps.javax_annotation

    debugImplementation deps.leakcanary_no_op
    leakCanaryImplementation deps.leakcanary
    releaseImplementation deps.leakcanary_no_op
    psraReleaseImplementation deps.leakcanary_no_op

    implementation deps.stetho
    implementation deps.ormlite.core
    implementation deps.ormlite.android
    implementation deps.multidex
    annotationProcessor deps.butterknife_compiler


    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        implementation project(':product-registration-lib')
        implementation project(':uid')
        implementation project(':pif')
        implementation project(':jump')
        implementation project(':uAppFwLib')
        implementation project(':commlib-api')
        implementation project(':commlib-ble')
        implementation project(':AppInfra')
        implementation project(':mya-catk')
        implementation project(':mya-csw')
        implementation project(':cloudcontroller')
        implementation project(':cloudcontroller-api')
        implementation project(':productselection')
        implementation project(':commlib-cloud')
        implementation project(':commlib-lan')
        implementation project(':prx')
        implementation project(':ews-android')
        implementation project(':uikitLib')
        implementation project(':registrationApi')
        implementation project(':digitalCare')
        implementation project(':iap')
        implementation project(':dataServices')
        implementation project(':mya')
        implementation project(':commlib')
        implementation project(':commlib-demouapp')
        implementation project(':digitalCareUApp')
        implementation project(':uAppFwLibUApp')
        implementation project(':iapUApp')
        implementation project(':dataServicesUApp')
        implementation project(':product-registration-libUApp')
        implementation project(':UserRegistrationUApp')
        implementation project(':devicepairingUApp')
        implementation project(':telehealth')
        implementation project(':thsUapp')
        implementation project(':ewsUApp')
        implementation project(':bluelib-demouapp')
        implementation project(':bluelib')
        implementation project(':pushnotification')
        implementation project(':themesettings')
    } else {
        implementation philipsdeps.product_registration_lib
        implementation philipsdeps.digitalCare
        implementation philipsdeps.iap
        implementation (philipsdeps.dataServices) {
            exclude group: 'com.android.support'
        }
        implementation (philipsdeps.mya) {
            exclude group: 'com.android.support'
        }
        implementation philipsdeps.mya_mch
        implementation philipsdeps.telehealth
        implementation philipsdeps.telehealthUApp
        implementation philipsdeps.ewsUApp
        implementation philipsdeps.bluelib_demouapp
        implementation project(':pushnotification')
        implementation project(':themesettings')
    }
    implementation deps.butterknife
    annotationProcessor deps.butterknife_compiler
    testImplementation deps.json
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.opengl
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_classloading_xstream
    testImplementation deps.powermock_core
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_junit_rule_agent
    testImplementation deps.robolectric_3_8
    testImplementation deps.robolectric_shadows
    testImplementation deps.robolectric_shadows_multidex
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

tasks.withType(Test) {
    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "2048m"
}

task('printArtifactoryApkPath') {
    doLast {
        if (new File('apkname.txt').exists()) {
            new File('apkname.txt').delete()
        }
        File apkname = new File('apkname.txt')
        apkname.append(objcdp.getArtifactoryContextUrl() +   \
          "/" + objcdp.getArtifactoryPublishRepoKey() +   \
          "/" + project.group.replace('.', '/') + "/" +   \
          archivesBaseName + "/" + version +   \
          "/" + archivesBaseName + "-" + version + ".apk")
        println "Artifactory path of apk stored in apkname.txt"
    }
}
