apply plugin: 'com.android.application'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'de.felixschulze.gradle.hockeyapp'

apply from: "../scripts/versions.gradle"
apply from: "../scripts/task_verification.gradle"
apply from: "../scripts/task_reporting.gradle"

jacoco {
    toolVersion = "${versionsExternal.jacocoToolVersion}"
}

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven {
            url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath "com.trickyandroid:jacoco-everywhere:0.2.1"
        classpath "com.android.tools.build:gradle:2.3.1"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12"
        classpath(builddeps.cdpSCM)
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.8"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2"
        classpath "de.felixschulze.gradle:gradle-hockeyapp-plugin:3.6"
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM

def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment)
archivesBaseName = "referenceApp"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url 'https://maven.google.com'
        }
        maven {
            url 'https://maven.google.com'
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(versions.rap_referenceApp)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('apk')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
def zipSrc = file(buildDir.name + "/distributions/$project.name-$version-src" + '.tgz')
artifacts {
    archives zipDoc
    archives zipSrc
}

task zipDocuments(type: Zip) {
    from files(objcdp.getExternalDocPath()) {
        baseName = project.name
        classifier 'docs'
    }
}

task tgzTask(type: Tar) {
    classifier = 'src'
    from projectDir
    include '**/*'
    exclude('build')
    extension = 'tgz'
    compression = Compression.GZIP
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/mapping/AppFrameworkHamburger/release/mapping.txt") {
                classifier = 'mapping'
            }

            artifact("$buildDir/outputs/apk/${archivesBaseName}-release.apk")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}

hockeyapp {
    apiToken = "b9d6e2f453894b4fbcb161b33a94f6c8"
    commitSha = objcdp.getCommitHashLong()
    buildServerUrl = objcdp.getArtifactoryUrl()
    releaseType = 2 // alpha
    notify = 2
    mappingFileNameRegex = "mapping.txt"
    mandatory = 1
    status = 2
    notesType = 1
    notes = new File(projectDir, "/../../../Documents/External/ReleaseNotes.md").getText('UTF-8')
}

android {
    compileSdkVersion config.targetSdk
    buildToolsVersion config.buildTools

    defaultConfig {
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        versionCode config.versionCode
        versionName version + "(" + objcdp.getCommitHash() + ")"
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi config.renderScriptApi
        renderscriptSupportModeEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    apply from: "../scripts/proposition_specific.gradle"
    apply from: "../scripts/flavors.gradle"
    apply from: "../scripts/exclude_files.gradle"
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

    exclude group: 'commons-codec', module: 'commons-codec'
    exclude module: 'httpcore'
}

dependencies {
    compile("com.android.support:support-annotations:${versionsAndroid.support}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile "com.android.support:design:${versionsAndroid.support}"
    compile "com.android.support:appcompat-v7:${versionsAndroid.support}"

    debugCompile "com.squareup.leakcanary:leakcanary-android-no-op:${versionsExternal.leakCanary}"
    leakCanaryCompile "com.squareup.leakcanary:leakcanary-android:${versionsExternal.leakCanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${versionsExternal.leakCanary}"
    psraReleaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${versionsExternal.leakCanary}"

    debugCompile "com.facebook.stetho:stetho:${versionsExternal.stetho}"
    compile "com.j256.ormlite:ormlite-core:${versionsExternal.ormLite}"
    compile "com.j256.ormlite:ormlite-android:${versionsExternal.ormLite}"
    compile "com.android.support:multidex:${versionsAndroid.multidex}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${versionsExternal.butterKnife}"

    compile("com.crittercism:crittercism-android-agent:${versionsExternal.crittercism}")

    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        compile project(':product-registration-lib')
    } else {
        compile(group: 'com.philips.cdp', name: 'product-registration-lib', version: versions.prg_productRegistrationLib + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            transitive = true
        }
    }

    if(dp) {
        compile project(':digitalCare')
    } else {
        compile(group: 'com.philips.cdp', name: 'digitalCare', version: versions.dcc_digitalCare + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            transitive = true
        }
    }

    if(dp) {
        compile project(':iap')
    } else {
        compile(group: 'com.philips.cdp', name: 'iap', version: versions.iap_iap + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            transitive = true
        }
    }

    if(dp) {
        compile project(':dataServices')
    } else {
        compile(group: 'com.philips.cdp', name: 'dataServices', version: versions.dsc_dataServices + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':MyAccount')
    } else {
        compile(group: 'com.philips.cdp', name: 'MyAccount', version: versions.mya_myAccount + objcdp.getVersionSuffix(), ext: 'aar')
        {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':commlib')
    } else {
        compile(group: 'com.philips.cdp', name: 'commlib', version: versions.cml_commlib + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':commlib-demouapp')
    } else {
        compile(group: 'com.philips.cdp', name: 'commlib-demouapp', version: versions.cml_commlib + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':digitalCareUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'digitalCareUApp', version: versions.dcc_digitalCare + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':uAppFwLibUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'uAppFwLibUApp', version: versions.uaf_uAppFwLib + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':iapUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'iapUApp', version: versions.iap_iap + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':dataServicesUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'dataServicesUApp', version: versions.dsc_dataServices + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':product-registration-libUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'product-registration-libUApp', version: versions.prg_productRegistrationLib + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':UserRegistrationUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'UserRegistrationUApp', version: versions.usr_registrationApi + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            exclude group: 'com.philips.cdp', module: 'RegistrationApi'
            transitive = true
        }
    }

    if(dp) {
        compile project(':devicepairingUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'devicepairingUApp', version: versions.dpr_devicePairing + objcdp.getVersionSuffix(), ext: 'aar') {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    if(dp) {
        compile project(':telehealth')
    } else {
        compile(group: 'com.philips.cdp', name: 'telehealth', version: versions.ths_telehealth+ objcdp.getVersionSuffix(), ext: 'aar') {
           transitive = true
        }
    }

    if (dp) {
        compile project(':ewsUApp')
    } else {
        compile(group: 'com.philips.cdp', name: 'ewsUApp', version: versions.ews_ews + objcdp.getVersionSuffix())

    }

    if(dp) {
        compile project(':bluelib-demouapp')
    } else {
        compile(group: 'com.philips.cdp', name: 'bluelib-demouapp', version: versions.bll_shinelib+ objcdp.getVersionSuffix(), ext: 'aar')
        {
            transitive = true
        }
    }

    testCompile "junit:junit:${versionsExternal.junit}"
    testCompile "org.khronos:opengl-api:${versionsExternal.opengl}"
    testCompile "org.robolectric:robolectric:${versionsExternal.robolectric}"
//    testCompile "org.robolectric:shadows-multidex:${versionsExternal.junit}"
    testCompile "org.robolectric:shadows-support-v4:${versionsExternal.robolectricSupport}"
    testCompile "org.mockito:mockito-all:${versionsExternal.mockitoAll}"

    testCompile "org.powermock:powermock-core:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4-rule:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4-rule-agent:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-api-mockito:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-classloading-xstream:${versionsExternal.powerMock}"

    testCompile "org.json:json:${versionsExternal.json}"

    compile project(':pushnotification')

    compile project(':themesettings')
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

tasks.withType(Test) {
    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "2048m"
}

task('printArtifactoryApkPath') {
    doLast {
        if (new File('apkname.txt').exists()) {
            new File('apkname.txt').delete()
        }
        File apkname = new File('apkname.txt')
        apkname.append(objcdp.getArtifactoryContextUrl() +   \
          "/" + objcdp.getArtifactoryPublishRepoKey() +   \
          "/" + project.group.replace('.', '/') + "/" +   \
          archivesBaseName + "/" + version +   \
          "/" + archivesBaseName + "-" + version + ".apk")
        println "Artifactory path of apk stored in apkname.txt"
    }
}
