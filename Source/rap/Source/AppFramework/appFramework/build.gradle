/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'
apply plugin: 'de.felixschulze.gradle.hockeyapp'

apply from: "../scripts/task_verification.gradle"
apply from: "../scripts/task_reporting_logging.gradle"

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/tasks.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath builddeps.cdpSCM
        classpath builddeps.bintrayplugin
        classpath builddeps.hockeyapp
    }
}

archivesBaseName = strings.rap.artifactName

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications('apk')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
def zipSrc = file(buildDir.name + "/distributions/$project.name-$version-src" + '.tgz')

artifacts {
    archives zipDoc
    archives zipSrc
}

task zipDocuments(type: Zip) {
    from files(projectDir.toString() + "/../../../Documents/External/") {
        baseName = project.name
        classifier 'docs'
    }
}

task tgzTask(type: Tar) {
    classifier = 'src'
    from projectDir
    include '**/*'
    exclude('build')
    extension = 'tgz'
    compression = Compression.GZIP
}
//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        apk(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact zipDocuments

            artifact("$buildDir/outputs/mapping/release/mapping.txt") {
                classifier = 'mapping'
            }

            artifact("$buildDir/outputs/apk/release/${archivesBaseName}-release.apk")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.getByName("implementation").allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

hockeyapp {
    apiToken = "b9d6e2f453894b4fbcb161b33a94f6c8"
    commitSha = objcdp.getCommitHashLong()
    buildServerUrl = objcdp.getArtifactoryUrl()
    releaseType = 2 // alpha
    notify = 2
    mappingFileNameRegex = "mapping.txt"
    mandatory = 1
    status = 2
    notesType = 1
    notes = new File(projectDir, "/../../../Documents/External/ReleaseNotes.md").getText('UTF-8')
}

def buildType

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    applicationVariants.all { variant ->
        buildType = variant.buildType.name // sets the current build type
        println "*****BuildType****" + buildType
    }

    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        versionCode 1
        versionName version + "(" + objcdp.getCommitHash() + ")"
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        multiDexEnabled true
    }

    apply from: "../scripts/proposition_specific.gradle"
    apply from: "../scripts/flavors.gradle"
    apply from: "../scripts/exclude_files.gradle"

    applicationVariants.all { variant ->
        def productFlavor = variant.productFlavors[0] != null ? "${variant.productFlavors[0].name.capitalize()}" : ""
        def buildtype = "${variant.buildType.name.capitalize()}"
        tasks["compile${productFlavor}${buildtype}UnitTestSources"].dependsOn(tasks["merge${productFlavor}${buildtype}Assets"])
    }
}

apply from: project.rootDir.absolutePath + '/build-support/gradle/apidocs.gradle'

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'

    exclude group: 'commons-codec', module: 'commons-codec'
    exclude module: 'httpcore'
}

dependencies {
    implementation(deps.support.annotations) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    implementation deps.support.design
    implementation deps.support.supportv4
    implementation deps.gson
    implementation deps.wechat
    implementation deps.shamanland_fonticon
    implementation deps.joda_time
    implementation deps.volley
    implementation deps.javax_inject
    implementation deps.javax_annotation
    implementation deps.play_services_gcm
    implementation (deps.firebase_core) {
        exclude group: 'com.google.firebase', module: 'firebase-iid'
    }
    implementation deps.firebase_config
    implementation deps.firebase_iid

    debugImplementation deps.leakcanary_no_op
    leakCanaryImplementation deps.leakcanary
    releaseImplementation deps.leakcanary_no_op
    psraReleaseImplementation deps.leakcanary_no_op

    implementation deps.ormlite.core
    implementation deps.ormlite.android
    implementation deps.multidex
    implementation deps.butterknife
    annotationProcessor deps.butterknife_compiler

    if (directdependencies) {
        implementation project(strings.prg.projectName)
        implementation project(strings.uid.projectName)
        implementation project(strings.pif.projectName)
        implementation project(strings.jmp.projectName)
        implementation project(strings.ufw.projectName)
        implementation project(strings.cmlapi.projectName)
        implementation project(strings.cmlble.projectName)
        implementation project(strings.ail.projectName)
        implementation project(strings.catk.projectName)
        implementation project(strings.csw.projectName)
        implementation project(strings.clc.projectName)
        implementation project(strings.cca.projectName)
        implementation project(strings.pse.projectName)
        implementation project(strings.ccl.projectName)
        implementation project(strings.cmllan.projectName)
        implementation project(strings.prx.projectName)
        implementation project(strings.ews.projectName)
        implementation project(strings.uit.projectName)
        implementation project(strings.usr.projectName)
        implementation project(strings.dcc.projectName)
        implementation project(strings.iap.projectName)
        implementation project(strings.dsc.projectName)
        implementation project(strings.mya.projectName)
        implementation project(strings.cml.projectName)
        implementation project(strings.cmluapp.projectName)
        implementation project(strings.dccuapp.projectName)
        implementation project(strings.ufwuapp.projectName)
        implementation project(strings.iapuapp.projectName)
        implementation project(strings.dscuapp.projectName)
        implementation project(strings.prguapp.projectName)
        implementation project(strings.usruapp.projectName)
        implementation project(strings.dpruapp.projectName)
        implementation project(strings.ths.projectName)
        implementation project(strings.thsuapp.projectName)
        implementation project(strings.ewsuapp.projectName)
        implementation project(strings.blluapp.projectName)
        implementation project(strings.bll.projectName)
        implementation project(strings.pnf.projectName)
        implementation project(strings.tse.projectName)
        implementation project(strings.neurauapp.projectName)
        implementation project(strings.ailuapp.projectName)
    } else {
        implementation philipsdeps.product_registration_lib
        implementation philipsdeps.uid
        implementation philipsdeps.pif
        implementation philipsdeps.jump
        implementation philipsdeps.uAppFwLib
        implementation philipsdeps.commlib_api
        implementation philipsdeps.commlib_ble
        implementation philipsdeps.AppInfra
        implementation philipsdeps.catk
        implementation philipsdeps.csw
        implementation philipsdeps.cloudcontroller
        implementation philipsdeps.cloudcontroller_api
        implementation philipsdeps.productselection
        implementation philipsdeps.commlib_cloud
        implementation philipsdeps.commlib_lan
        implementation philipsdeps.prx
        implementation philipsdeps.ews_android
        implementation philipsdeps.uikitLib
        implementation philipsdeps.registrationApi
        implementation philipsdeps.digitalCare
        implementation philipsdeps.iap
        implementation(philipsdeps.dataServices) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.mya) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.commlib) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.commlib_demouapp) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.digitalCareUApp) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.uAppFwLibUApp) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.iapUApp) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.dataServicesUApp) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.product_registration_libUApp) {
            exclude group: 'com.android.support'
        }
        implementation(philipsdeps.UserRegistrationUApp) {
            exclude group: 'com.android.support'
            exclude group: 'com.philips.cdp', module: 'RegistrationApi'
        }
        implementation(philipsdeps.devicepairingUApp) {
            exclude group: 'com.android.support'
        }
        implementation philipsdeps.telehealth
        implementation philipsdeps.telehealthUApp
        implementation philipsdeps.ewsUApp
        implementation philipsdeps.bluelib_demouapp
        implementation philipsdeps.bluelib
        implementation philipsdeps.NeuraUApp
        implementation project(strings.pnf.projectName)
        implementation project(strings.tse.projectName)
        implementation philipsdeps.AppInfraUApp
    }
    testImplementation deps.json
    testImplementation deps.junit
    testImplementation deps.opengl
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_classloading_xstream
    testImplementation deps.powermock_core
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_junit_rule_agent
    testImplementation deps.robolectric
    testImplementation deps.robolectric_shadows
    testImplementation deps.robolectric_shadows_multidex
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.compile
}

tasks.withType(Test) {
    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "2048m"
}

task('printArtifactoryApkPath') {
    doLast {
        if (new File('apkname.txt').exists()) {
            new File('apkname.txt').delete()
        }
        File apkname = new File('apkname.txt')
        apkname.append(objcdp.getArtifactoryContextUrl() +      \
             "/" + objcdp.getArtifactoryPublishRepoKey() +      \
             "/" + project.group.replace('.', '/') + "/" +      \
             archivesBaseName + "/" + version +      \
             "/" + archivesBaseName + "-" + version + ".apk")
        println "Artifactory path of apk stored in apkname.txt"
    }
}

task('printPlatformVersion') {
    doLast {
        if (new File('platformversion.txt').exists()) {
            new File('platformversion.txt').delete()
        }
        File platformversion = new File('platformversion.txt')
        platformversion.append(version)
        println "Platform version stored in platformversion.txt"
    }
}