apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'jacoco'

apply from: "../scripts/task_reporting_pushnotification.gradle"
apply from: "../scripts/versions.gradle"
apply from: "../scripts/task_reporting_logging.gradle"
apply from: "../scripts/flavors_pushnotification.gradle"

jacoco {
    toolVersion = "${versionsExternal.jacocoToolVersion}"
}

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven { url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath builddeps.trickyandroid
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
        classpath builddeps.androidapt
        classpath builddeps.bintrayplugin
    }
}


def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = project.name


allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(versions.rap_referenceApp)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

android {

    compileSdkVersion config.targetSdk
    buildToolsVersion config.buildTools

    defaultConfig {
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        versionCode config.versionCodePn
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile deps.support.appcompatv7
    compile deps.play_services_gcm

    def dp = project.ext.has('useprojectdependencies')

   if(dp) {
        compile project(':AppInfra')
    } else {
        compile(group: 'com.philips.cdp', name: 'AppInfra', version: versions.ail_appInfra + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    testCompile deps.junit
    testCompile deps.opengl
    testCompile deps.robolectric
    testCompile deps.robolectric_shadows
    testCompile deps.robolectric_shadows_multidex
    testCompile deps.mockito_all

    testCompile deps.powermock_core
    testCompile deps.powermock_module_junit4
    testCompile deps.powermock_junit_rule
    testCompile deps.powermock_junit_rule_agent
    testCompile deps.powermock_api_mockito
    testCompile deps.powermock_classloading_xstream

    testCompile deps.json
}

apply plugin: 'com.google.gms.google-services'
