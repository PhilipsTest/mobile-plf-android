/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.library'

apply from: "../scripts/task_reporting_logging.gradle"
apply from: "../scripts/flavors_pushnotification.gradle"

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'

buildscript {
    dependencies {
        classpath builddeps.buildinfoextractor
        classpath builddeps.bintrayplugin
    }
}

archivesBaseName = project.name

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()

    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps.support.appcompatv7
    implementation deps.play_services_gcm
    implementation deps.firebase_core

    if (directdependencies) {
        implementation project(':AppInfra')
    } else {
        implementation(philipsdeps.AppInfra) {
            exclude group: 'com.android.support'
        }
    }

    testImplementation deps.json
    testImplementation deps.junit
    testImplementation deps.opengl
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_classloading_xstream
    testImplementation deps.powermock_core
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_junit_rule_agent
    testImplementation deps.robolectric
    testImplementation deps.robolectric_shadows
    testImplementation deps.robolectric_shadows_multidex
}

tasks.withType(Test) {
    ignoreFailures = true
}

