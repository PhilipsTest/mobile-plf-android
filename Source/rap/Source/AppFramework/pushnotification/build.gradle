apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven { url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12"
        classpath(builddeps.cdpSCM)
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}


def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = project.name


allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(versions.rap_referenceApp)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

android {

    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
//            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            shrinkResources false
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true

        unitTests.all {
            // set JVM arguments for the test JVM(s)
            jvmArgs '-noverify'
            testLogging {
                events "started", "passed", "skipped", "failed"
                outputs.upToDateWhen {false}
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.google.android.gms:play-services-gcm:11.0.4'

    def dp = project.ext.has('useprojectdependencies')

   if(dp) {
        compile project(':AppInfra')
    } else {
        compile(group: 'com.philips.cdp', name: 'AppInfra', version: versions.ail_appInfra + objcdp.getVersionSuffix(), ext: 'aar', changing: true) {
            exclude group: 'com.android.support'
            transitive = true
        }
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testCompile 'org.robolectric:robolectric:3.4.2'
    testCompile 'org.robolectric:shadows-multidex:3.3.2'
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'

    testCompile 'org.powermock:powermock-core:1.6.6'
    testCompile "org.powermock:powermock-module-junit4:1.6.6"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.6"
    testCompile "org.powermock:powermock-module-junit4-rule-agent:1.6.6"
    testCompile "org.powermock:powermock-api-mockito:1.6.6"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.6"
    testCompile 'org.robolectric:robolectric:3.4.2'
    testCompile 'org.robolectric:robolectric-annotations:3.3.2'

    testCompile 'org.json:json:20170516'
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
        dir: "${buildDir}/intermediates/classes/debug",
        excludes: [
                '**/R.class',
                '**/R$*.class',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/com/philips/platform/referenceapp/utils/PushNotificationConstants*.*'
        ])

    def coverageSourceDirs = [
            "src/main/java"
    ]

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)

    executionData = fileTree(dir: buildDir, includes: [
            "jacoco/testDebugUnitTest.exec",
    ])
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

apply plugin: 'com.google.gms.google-services'
