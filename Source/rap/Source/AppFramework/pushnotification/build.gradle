apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'jacoco'

apply from: "../scripts/task_reporting_pushnotification.gradle"
apply from: "../scripts/versions.gradle"
apply from: "../scripts/task_reporting_logging.gradle"
apply from: "../scripts/flavors_pushnotification.gradle"

jacoco {
    toolVersion = "${versionsExternal.jacocoToolVersion}"
}

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'

    repositories {
        maven { url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath 'com.trickyandroid:jacoco-everywhere:0.2.1'
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12"
        classpath(builddeps.cdpSCM)
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}


def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = project.name


allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(platformversion)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

android {

    compileSdkVersion config.targetSdk
    buildToolsVersion config.buildTools

    defaultConfig {
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        versionCode config.versionCodePn
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    publishNonDefault true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${versionsAndroid.support}"
    compile "com.google.android.gms:play-services-gcm:${versionsExternal.gcm}"

    def dp = project.ext.has('useprojectdependencies')

   if(dp) {
       debugCompile project(path: ':AppInfra', configuration: 'debug')
       releaseCompile project(path: ':AppInfra', configuration: 'release')
    } else {
        compile(group: 'com.philips.cdp', name: 'AppInfra', version: platformversion + objcdp.getVersionSuffix(), changing: true) {
            exclude group: 'com.android.support'
        }
    }

    testCompile "junit:junit:${versionsExternal.junit}"
    testCompile "org.khronos:opengl-api:${versionsExternal.opengl}"
    testCompile "org.robolectric:robolectric:${versionsExternal.robolectric}"
    testCompile "org.robolectric:shadows-support-v4:${versionsExternal.robolectricSupport}"
    testCompile "org.robolectric:shadows-multidex:${versionsExternal.robolectricSupport}"
    testCompile "org.mockito:mockito-all:${versionsExternal.mockitoAll}"

    testCompile "org.powermock:powermock-core:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4-rule:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4-rule-agent:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-api-mockito:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-classloading-xstream:${versionsExternal.powerMock}"

    testCompile "org.json:json:${versionsExternal.json}"
}

apply plugin: 'com.google.gms.google-services'
