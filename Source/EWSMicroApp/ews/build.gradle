apply plugin: 'com.android.library'
apply from: "../scripts/versions.gradle"

android {
    compileSdkVersion config.targetSdk
    buildToolsVersion config.buildTools
    defaultConfig {
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi config.targetSdk
        renderscriptSupportModeEnabled true
        multiDexEnabled true
        testApplicationId "com.philips.platform.appframework.test"
    }
    sourceSets {
        main.res.srcDirs += 'src/main/res-ews'
    }
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        buildTypes {
            release {
                minifyEnabled true
                shrinkResources true
                debuggable false
                testCoverageEnabled false
                proguardFile 'proguard-rules.pro'
            }
            debug {
                minifyEnabled false
                shrinkResources false
                debuggable true
                testCoverageEnabled false
                proguardFile 'proguard-rules.pro'
            }
        }

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/INDEX.LIST'
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Android/Google
    compile "com.android.support:support-annotations:${versionsAndroid.support}"
    compile "com.android.support:design:${versionsAndroid.support}"
    compile "com.android.support:appcompat-v7:${versionsAndroid.support}"
    compile "com.android.support:animated-vector-drawable:${versionsAndroid.support}"
    compile "com.android.support:cardview-v7:${versionsAndroid.support}"
    compile "com.android.support:multidex:${versionsAndroid.multidex}"
    compile 'net.danlew:android.joda:2.9.9'

    // Philips Dependencies
    compile(group: 'com.philips.cdp', name: 'commlib-all', version: "${versionsPhilips.cba}", ext: 'aar') {
        exclude group: 'com.android.support'
        transitive = true
    }
    compile(group: 'com.philips.cdp', name: 'digitalCare', version: "${versionsPhilips.dcc}", ext: 'aar') {
        exclude group: 'com.android.support'
        transitive = true
    }
    compile "com.google.dagger:dagger:${versionsExternal.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${versionsExternal.dagger}"
    compile "org.greenrobot:eventbus:${versionsExternal.eventBus}"

    // Test
    testCompile "junit:junit:${versionsExternal.junit}"
    testCompile "org.mockito:mockito-core:${versionsExternal.mockito}"
    testCompile "org.robolectric:robolectric:${versionsExternal.robolectric}"
    testCompile "org.powermock:powermock-module-junit4:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-api-mockito:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-module-junit4-rule:${versionsExternal.powerMock}"
    testCompile "org.powermock:powermock-classloading-xstream:${versionsExternal.powerMock}"
    testCompile("com.nhaarman:mockito-kotlin:${versionsExternal.mockitoKotlin}") {
        exclude group: 'org.mockito'
    }
}
