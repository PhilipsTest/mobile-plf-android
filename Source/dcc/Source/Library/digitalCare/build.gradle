apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/taskscc.gradle'

//apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/lib.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/zipdocs.gradle'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'
   
    repositories {
        maven { url repos.jcenter
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = "digitalCare"

allprojects {
    repositories {
        maven {
            url repos.plugin
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }

        maven { url sonatype }
        maven { url robolectric }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}

//=======To zip and upload "Documents/External" ==STARTS=============
def zipDoc = file(buildDir.name + "/distributions/$project.name-$version-docs" + '.zip')
artifacts {
    archives zipDoc
}

//=======To zip and upload "Documents/External" ==ENDS=============

publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.implementation.allDependencies
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools
    compileOptions {
        sourceCompatibility versions.sourceCompatibility
        targetCompatibility versions.targetCompatibility
    }

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionName version +  "(" + objcdp.getCommitHash() + ")"
        multiDexEnabled true
        generatedDensities = []
        testApplicationId "com.philips.cdp.digitalcare.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        manifestPlaceholders = ['appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp']
        resValue("string", "DCC_AUTHORITY", "com.philips.cdp.digitalcare")
    }

    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        unitTests.all {
            jvmArgs '-noverify'
        }
    }


    resourcePrefix 'consumercare'

    buildTypes {
        release {
            shrinkResources false
            consumerProguardFiles 'proguard-dcc.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            testCoverageEnabled=true
        }

        android.libraryVariants.all { variant ->

            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
                destinationDir = new File("${project.getProjectDir()}/doc/", "ConsumerCare")
                source = variant.javaCompile.source

                ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"


                description "Generates Javadoc for $variant.name."

                options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
                options.links("http://docs.oracle.com/javase/7/docs/api/");
                options.links("http://developer.android.com/reference/reference/");
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
                
                doFirst {
                    classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
                }
            }
        }
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE'
    }

}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    testImplementation deps.junit
    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        implementation project(':productselection')
        implementation project(':uid')
        implementation project(':uAppFwLib')
        implementation project(':AppInfra')
        implementation project(':prx')
        implementation project(':mya-csw')
        implementation project(':mya-catk')
        implementation project(':pif')
    } else {
        implementation philipsdeps.productselection
        implementation philipsdeps.uid
        implementation philipsdeps.mya_csw
    }

    implementation deps.play_services_maps
    implementation deps.constraintlayout
    implementation deps.calligraphy
    implementation deps.support.appcompatv7
    implementation deps.support.recyclerview
    implementation deps.gson
    implementation deps.volley
    implementation deps.shamanland_fonticon
    testImplementation deps.opengl
    testImplementation deps.robolectric
    testImplementation deps.robolectric_shadows_multidex
    testImplementation deps.robolectric_shadows
    testImplementation deps.powermock_core
    testImplementation deps.mockito
    testImplementation deps.powermock_junit
    testImplementation deps.powermock_junit_rule
    testImplementation deps.powermock_junit_rule_agent
    testImplementation deps.powermock_api_mockito
    testImplementation deps.powermock_classloading_xstream
}
task findbugs(type: FindBugs, dependsOn: "assembleDebug") {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/outputs/lib"
    from configurations.implementation
}

tasks.withType(Test) {
    ignoreFailures = true
}
