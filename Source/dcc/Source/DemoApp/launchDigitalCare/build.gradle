/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        //classpath builddeps.cdpSCM
    }
}

archivesBaseName = "digitalCareApp"
group = 'com.philips.platform'


android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        applicationId "com.philips.cl.di.dev.pa"
        generatedDensities = []
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        generatedDensities = []
        multiDexEnabled true
        manifestPlaceholders = ['appAuthRedirectScheme': 'com.googleusercontent.apps.346000571262-m5u27lu130n1h1i2vbsggo34ae6nr1hp']
    }

    lintOptions {
        checkReleaseBuilds false
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFile 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /*
    This defined for signing the apk -- start
     */
    def Properties props = new Properties()
    println "  projectDir:   " + project.projectDir;
    def propFile = new File("${project.projectDir}/signing.properties")
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            println 'signing.properties found and fully filled in'
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'dcc NOPE - signing.properties NOT found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */

    dexOptions {
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE'
    }
}

dependencies {
    implementation deps.androidx.recyclerview
    implementation deps.androidx.appcompatv7
    implementation project(strings.dccuapp.projectName)
    implementation project(strings.ail.projectName)
    implementation project(strings.ufw.projectName)

    androidTestImplementation deps.espresso_core

    androidTestImplementation deps.espresso_contrib, {
        androidTestImplementation deps.uiautomator
    }

    androidTestimplementation deps.androidx.annotations
    androidTestImplementation deps.androidx_test.runner
    androidTestImplementation deps.androidx_test.rules
    androidTestImplementation deps.jsr305
}

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug')
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("findbugs-exclude.xml")
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: "assembleDebug") {
    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

tasks.withType(Test) {
    ignoreFailures = true
}