apply plugin: 'com.android.library'

apply plugin: 'com.jfrog.artifactory'
//apply from: '../extra/calabash.gradle'
apply plugin: 'maven-publish'

buildscript {
    apply from: projectDir.absolutePath + '/../../../../../build-support/gradle/versions.gradle'
   
    repositories {
        maven { url 'http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-jcenter-remote'
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
    }

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        classpath(builddeps.cdpSCM)
    }
}

def environment = 'production'
if (project.hasProperty('envCode')) {
    environment = envCode
}

apply plugin: 'cdpSCM'
import com.philips.cdp.cdpSCM
def objcdp = new cdpSCM()
objcdp.setProjectDir(projectDir)
objcdp.setEnv(platform: 'android', env: environment )
archivesBaseName = "digitalCareUApp"

allprojects {
    repositories {
        maven {
            url "http://artifactory-ehv.ta.philips.com:8082/artifactory/platform-plugins-release-local"
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        maven {
            url objcdp.getArtifactoryUrl()
            credentials {
                username = "readonly"
                password = "123qweasdzxc"
            }
        }
        apply plugin: 'com.jfrog.artifactory'
        group = 'com.philips.cdp'

        flatDir {
            dirs 'libs'
        }
    }
}

group = 'com.philips.cdp'
version = objcdp.getVersion(platformversion)

artifactory {
    contextUrl = objcdp.getArtifactoryContextUrl()
    publish {
        repository {
            repoKey = objcdp.getArtifactoryPublishRepoKey()
            username = objcdp.getArtifactoryUploadUser()
            password = objcdp.getArtifactoryUploadPwd()
            defaults {
                publishPom = true
                publishIvy = false
                publishBuildInfo = true
                publishArtifacts = true
                publications ('aar')
                properties = ['git.commitid': objcdp.getCommitHashLong()]
            }
        }
    }
    resolve {
        repository {
            repoKey = objcdp.getArtifactoryResolveRepoKey()
        }
    }
    clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}


publishing {
    publications {
        aar(MavenPublication) {
            groupId group
            version = version
            artifactId archivesBaseName

            artifact("$projectDir/dependencies.lock") {
                classifier = '1stleveldependencies'
            }

            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")

            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')
                def resolvedArtifacts = configurations.default.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleVersion.id.group)
                    dependencyNode.appendNode('artifactId', it.moduleVersion.id.name)
                    dependencyNode.appendNode('version', it.moduleVersion.id.version)
                }
            }
        }
    }
}



android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {

        minSdkVersion versions.minsdk
        targetSdkVersion versions.target
        versionCode 1
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    lintOptions {
        abortOnError false
    }

    publishNonDefault true
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile deps.support.design

    def dp = project.ext.has('useprojectdependencies')

    if(dp) {
        debugCompile project(path: ':uAppFwLib', configuration: 'debug')
        releaseCompile project(path: ':uAppFwLib', configuration: 'release')
    } else {
        compile(group: 'com.philips.cdp', name: 'uAppFwLib', version: platformversion + objcdp.getVersionSuffix(), changing: true)
    }

    if(dp) {
        debugCompile project(path: ':AppInfra', configuration: 'debug')
        releaseCompile project(path: ':AppInfra', configuration: 'release')
    } else {
        compile(group: 'com.philips.cdp', name: 'AppInfra', version: platformversion + objcdp.getVersionSuffix(), changing: true)
    }

    compile deps.support.recyclerview
    compile deps.support.appcompatv7
    compile deps.support.supportv4

    debugCompile project(path: ':digitalCare', configuration: 'debug')
    releaseCompile project(path: ':digitalCare', configuration: 'release')
}

tasks.withType(Test) {
  ignoreFailures = true
}