/*
 * Copyright (c) 2015-2018 Koninklijke Philips N.V.
 * All rights reserved.
 */

apply plugin: 'com.android.application'

apply from: project.rootDir.absolutePath + '/build-support/gradle/cdpscm.gradle'
apply from: project.rootDir.absolutePath + '/build-support/gradle/projectnames.gradle'

buildscript {
    apply from: project.rootDir.absolutePath + '/build-support/gradle/versions.gradle'

    dependencies {
        classpath builddeps.gradle
        classpath builddeps.buildinfoextractor
        //classpath builddeps.cdpSCM
    }
}

archivesBaseName = "productselectionApp"
group = 'com.philips.platform'


android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.buildtools

    defaultConfig {
        applicationId "com.philips.hor_productselection_android"
        renderscriptTargetApi versions.renderscriptTargetApi
        renderscriptSupportModeEnabled true
        generatedDensities = []
        versionCode 3
        versionName "1.0.4"
        multiDexEnabled true
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    /*
        This defined for signing the apk -- start
    */
    def Properties props = new Properties()
    println "  projectDir:   " + project.projectDir;
    def propFile = new File("${project.projectDir}/signing.properties")
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            println 'signing.properties found and fully filled in'
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'iap NOPE - signing.properties NOT found'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'iap signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
    /*
    This defined for signing the apk -- end
    */
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation project(strings.pse.projectName)
    
    implementation project(strings.ail.projectName)
    implementation project(strings.prx.projectName)
    implementation project(strings.ufw.projectName)

    implementation deps.shamanland_fonticon
    implementation deps.androidx.appcompat
    implementation deps.androidx.recyclerview

    androidTestImplementation deps.androidx.espresso_core
}

tasks.withType(Test) {
    ignoreFailures = true
}