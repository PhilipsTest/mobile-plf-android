apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace(".aar", "-${versionName}.aar"))
        }
    }

    jacoco {
        version = "0.7.4.201502262128"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'junit:junit:4.12'
}

//task jacocoTestReport(type: JacocoReport) {
//    def coverageSourceDirs = [
//            'src/main/java'
//    ]
//
//    group = "Reporting"
//    description = "Generates Jacoco coverage reports"
//    reports {
//        xml {
//            enabled = true
//            destination "${buildDir}/reports/jacoco/jacoco.xml"
//        }
//        csv.enabled = false;
//        html {
//            enabled = true
//            destination "${buildDir}/jacocoHtml"
//        }
//    }
//
//    classDirectories = fileTree(
//            dir: 'build/intermediates/classes',
//            excludes: [ '**/R.class',
//                        '**/R$*.class',
//                        '**/BuildConfig.class',
//                        '**/Manifest*.*',
//                        '**/*Activity*.*',
//                        '**/*Fragment*.*'
//
//            ]
//    )
//
//    sourceDirectories = files(coverageSourceDirs)
//    additionalSourceDirs = files(coverageSourceDirs)
//    executionData = files('build/outputs/code-coverage/connected/coverage.ec')
//}

